[gcode_macro OMATESTI]
description: Set variables for tool change macro

variable_tool= -0.135
variable_i= -0.5
variable_j= 0
variable_array= 0
variable_array2= (5.32, 5.98)

gcode:

    #SET_GCODE_VARIABLE MACRO=OMATESTI VARIABLE=tool VALUE={i}

    #{% set k = i %}
    #{action_respond_info("%.3f" % (tool|float * -1) )}
    #M83								                 													#extruder to relative mode														
    #G0 E-{printer["gcode_macro TOOL_CHANGE"].filament_park} F1000

    #{action_respond_info("%.3f" % (printer.stepper_x.run_current|float ) )}

    {% if printer["gcode_macro OMATESTI"].array == 0 %}
       SET_GCODE_VARIABLE MACRO=OMATESTI VARIABLE=array VALUE=(1.58)
    {% else %}
        SET_GCODE_VARIABLE MACRO=OMATESTI VARIABLE=array VALUE='{'%s, %.3f' % (printer["gcode_macro OMATESTI"].array|replace("(", "")|replace(")", ""), j + 0.23 )}'
        SET_GCODE_VARIABLE MACRO=OMATESTI VARIABLE=j VALUE={j + 1}
    {% endif %}
   
    {% if printer["gcode_macro OMATESTI"].j > 0 %}
        #{action_respond_info("value %.2f" % printer["gcode_macro OMATESTI"].array[0]|float )}
        #{action_respond_info("value %.2f" % printer["gcode_macro OMATESTI"].array[1]|float )}
        #{% set calc1 = printer["gcode_macro OMATESTI"].array[0]|float %}
        #{% set calc2 = printer["gcode_macro OMATESTI"].array[1]|float %}
        #{% set result = calc1|float + calc2|float %}
      {% set result = printer["gcode_macro OMATESTI"].array[j - 1]|float + printer["gcode_macro OMATESTI"].array[j]|float %}
      {action_respond_info("result %.2f" % result|float )}
    {% endif %}
    {action_respond_info("array %s" % printer["gcode_macro OMATESTI"].array|string )}
    {action_respond_info("array 2 value0 %.2f" % printer["gcode_macro OMATESTI"].array2[0]|float)}
    {action_respond_info("remainder test %i" % (7 % 5) )}




####


[gcode_macro OMATESTI2]
description: Set variables for tool change macro

#variable_candidates= "extruder", "extruder1", "extruder2", "extruder3", "extruder4", "extruder5", "extruder6", "extruder7"

gcode:


    #{action_respond_info("toolhead.position %s" % printer.toolhead.position|string )}
    #{action_respond_info("gcode_move.gcode_position %s" % printer.gcode_move.gcode_position|string )}
    #{action_respond_info("gcode_move.position %s" % printer.gcode_move.position|string )}
    #{action_respond_info("toolhead.extruder %s" % printer.toolhead.extruder|string )}

    #{action_respond_info("printer.extruder1.target %.2f" % printer.extruder1.target|float )}
    #{action_respond_info("printer.extruder1.temperature %.2f" % printer.extruder1.temperature|float )}

    #{action_respond_info("printer.extruder.motion_queue %s" % printer.extruder.motion_queue )}

    #{action_respond_info("extruder%s" % params.T )}

    #{% set i = 1 %}
    #{% set ns = 2 %}
    #{action_respond_info("i = %i, ns = %i" % (i, ns) )}
    #{action_respond_info("printer.extruder %s" % printer.extruder )}



    #{% set prime = params.P|default(11)|int %} 
    #{% if prime == 0 %}
    #    {% set prime = 0, 0 %}
    #{% elif prime == 1 %}
    #    {% set prime = 0, 1 %}
    #{% elif prime == 10 %}
    #    {% set prime = 1, 0 %}
    #{% else %}
    #    {% set prime = 1, 1 %}
    #{% endif %}
    #{action_respond_info("prime = %s" % prime|string )}
    #{action_respond_info("prime[0] = %i, prime[1] = %i" % (prime[0]|int, prime[1]|int) )}

    #{action_respond_info("lock stepper run current %.2f" % printer["tmc2209 manual_stepper lock_stepper"].run_current|float )}

    #{action_respond_info("printer.fan.speed %s" % printer.fan.speed )}
    #{action_respond_info("printer.probe.name %s" % printer.probe.name )}
    #{action_respond_info("printer.configfile.config.probe.pin %s" % printer.configfile.config.probe.pin )}
    #{action_respond_info("printer.configfile.config.probe.x_offset %s" % printer.configfile.config.probe.x_offset )}
    #{action_respond_info("printer.configfile.config.probe.y_offset %s" % printer.configfile.config.probe.y_offset )}
    #{action_respond_info("reverse truncate pin %s" % printer.configfile.config.probe.pin|in(5)) }

    #{% if "PF5" in(printer.configfile.config.probe.pin) %}
    #    {action_respond_info("is in %s" % printer.configfile.config.probe.pin) }
    #{% endif %}

    #{action_respond_info("hotend_fan.heater_temp %s" % printer.configfile.config["heater_fan hotend_fan"].heater_temp )}


    #{% set candidates= "extruder", "extruder1", "extruder2", "extruder3", "extruder4", "extruder5", "extruder6", "extruder7" %}
    #{action_respond_info("available_heaters|selectattr %s" % printer.heaters.available_heaters|select("in", candidates )|list|length )}
    #{action_respond_info("available_heaters|count %s" % printer.heaters.available_heaters|list|length)}
    #{action_respond_info("available_heaters|count %s" % printer.heaters.available_heater|string|length)}
    #{action_respond_info("available_heaters %s" % printer.heaters.available_heaters|string)}

    #{action_respond_info("available_sensors %s" % printer.heaters.available_sensors|string)}
    
    #{action_respond_info("printer-fan_generic dock_cooling_fan-.speed %s" % printer["fan_generic dock_cooling_fan"].speed)}

    
    #{% set result = 1 %}
    #{% set decimals = printer["gcode_macro OFFSET_CAL_VAR"].results_desimals %}
    
    #{% set result = result|round(decimals) %}
    #{% set format = "%.10f" % result|float %}
    #{% set truncate = format|length - 10 + decimals %}
    #{action_respond_info("%s" % format|truncate((truncate), False, '') )}

    #{action_respond_info("has_chamber %s" % printer["gcode_macro PRINTER_VAR"].has_chamber|string)}

    #{action_respond_info("chamber temp %s" % printer["temperature_sensor chamber_temp"].temperature)}
    #{action_respond_info("chamber temp %s" % printer["temperature_sensor chamber_temp"].temperature|default(0))}

    
    #{action_respond_info("homed_axes = %s" % printer.toolhead.homed_axes)}

    
    #QUERY_FILAMENT_SENSOR SENSOR=toolhead_filament_sensor
    #{% if printer.query_endstops.last_query["manual_stepper nozzle_sense"] == 1 %}

    #{action_respond_info("filament sensor detected state = %s" % printer["filament_switch_sensor toolhead_filament_sensor"].filament_detected)}

    
    #{action_respond_info("idle_timeout state = %s" % printer.idle_timeout.state)}

            #{% if printer["filament_switch_sensor toolhead_filament_sensor"].filament_detected == False %} #and printer["filament_switch_sensor toolhead_filament_sensor"].enabled == "True" and
              #printer.idle_timeout.state == "Printing" %}
            #{action_respond_info("Toolhead filament runout detected")}
            #PAUSE
        #{% endif %}

    #{action_respond_info("printer.idle_timeout.state = %s" % printer.idle_timeout.state)}
    #{action_respond_info("printer.bed_mesh.profile_name = %s" % printer.bed_mesh.profile_name)}
    #{action_respond_info("z_tilt = %s" % printer.z_tilt.applied)}
    #{action_respond_info("printer.bed_mesh.profile_name|string|length = %s" % printer.bed_mesh.profile_name|string|length)}
    {action_respond_info("printer.idle_timeout.printing_time = %s" % printer.idle_timeout.printing_time)}
    
    
    #{action_respond_info("printer.configfile.config.stepper_z.position_max %s" % printer.configfile.config.stepper_z.position_max) }

            #{% if printer["gcode_macro _START_PRINT"].printing == 0 %}
            #{% if printer.toolhead.position.z < printer.configfile.config.stepper_z.position_max - 1 %}
                #G91
                #G0 Z{ ((printer.configfile.config.stepper_z.position_max|float - 1 - printer.toolhead.position.z|float), 2)|min } F1000
                #G90
            #{% endif %}

   #{action_respond_info("printer.toolhead.max_accel %s" % printer.toolhead.max_accel|string )}
    
####







