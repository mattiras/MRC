#####################################################
#                   Tool Change                     #
#####################################################

#Todo:

#save filament parking settings
#make a makro simplify setting parking, prime etc settings
#Inform user with M117 where reasonable

#separate variables that are not for user to change


[gcode_macro _TOOL_CHANGE_VAR]
description: Configuration for tool change macro

#Tool Change
#All Absolute positions, added to print area max
variable_tool_park_y= 47								#mm, Added to the start_y
variable_z_rise= 2
#variable_sled_dist= 37
variable_sled_dist= 8
variable_sled_min=23                                   #todo change to sled_x_min
variable_sled_x_correction = 0 #-2
#variable_servo= "my_servo"
#variable_servo_delay= 1000								#ms

variable_angle_min= -8  								#degrees
variable_angle_max= 104  				    			#degrees
variable_unlock_angle= 0								#degrees
variable_lock_angle= 94 			    			    #degrees
variable_lock_angle_relief= 8 			    			    #degrees
variable_lock_speed= 200 
variable_lock_stepper_current= 1.2
variable_lock_wait_time = 250                          #ms
variable_motion_fast= 15000								#mm/mi
variable_motion_slow= 6000								#mm/min
variable_motion_acceleration= 5000
variable_tc_min_temp= 180
#variable_filament_park_temp= 180
variable_filament_park_d= 25								#Filament park/retract distance mm
variable_filament_prime_d= 14								#mm
variable_filament_prime_pos= 37							#mm
variable_filament_prime_cool_t= 5		    			#s - lets the primed extrusion to harden and not to be dragged with nozzle. Please note that lock stepper is rehomed at that stage too so it adds time.
variable_retraction= 1			     				#mm - After prime
variable_e_speed= 1000									#mm/min
variable_e_speed_slow= 600			     				#mm/min
variable_slow_acc= 200	
variable_tc_arc_radius = 10

#T0

variable_tool_0_filament_park = 1                                   #Filament park/retract filament when tool parked 0=no, 1=yes
#variable_tool_0_filament_prime_d = 15                               #Filament prime distance mm
variable_tool_0_prime = 2                                           # 0=never, 1=always, 2=yes if tool loaded first time on print or tool has been parked for a defined time
variable_tool_0_prime_park_time = 20                                # minutes
variable_tool_0_pa = 0.04                                           #Pressure Advance
variable_tool_0_bump_temp = 2

#Dont touch
variable_tool_0_pos_x = 20										     #Absolute inital park x-position

#runtime variables
variable_tool_0_offset_x = 0									     #always 0 for T0
variable_tool_0_offset_y = 0									     #always 0 for T0
variable_tool_0_offset_z = 0								    	 #always 0 for T0
variable_tool_0_filament_is_parked = 0
variable_tool_0_filament_park_t_stamp = -456789

#T1

variable_tool_1_filament_park = 1                                   #Filament park/retract filament when tool parked 0=no, 1=yes
#variable_tool_1_filament_prime_d = 15                               #Filament prime distance mm
variable_tool_1_prime = 2                                           # 1=never, 1=always, 2=yes if tool loaded first time on print or tool has been parked for a defined time
variable_tool_1_prime_park_time = 20                                # minutes
variable_tool_1_pa = 0.04                                           #Pressure Advance
variable_tool_1_bump_temp = 2

#Dont touch
variable_tool_1_pos_x = 72										     #Absolute inital park x-position

#runtime variables
variable_tool_1_offset_x = 0									     #set on startup from variables.cfg
variable_tool_1_offset_y = 0									     #set on startup from variables.cfg
variable_tool_1_offset_z = 0								    	 #set on startup from variables.cfg
variable_tool_1_filament_is_parked = 0
variable_tool_1_filament_park_t_stamp = -456789

#T2

variable_tool_2_filament_park = 1                                     #Filament park/retract filament when tool parked 0=no, 1=yes
#variable_tool_2_filament_prime_d = 15                              #Filament prime distance mm
variable_tool_2_prime = 2                                      # 0=never, 1=always, 2=yes if tool loaded first time on print or tool has been parked for a defined time
variable_tool_2_prime_park_time = 20                           # minutes
variable_tool_2_pos_x = 124										#Absolute inital park x-position
variable_tool_2_pa = 0.04 #0.025
variable_tool_2_bump_temp = 5

#runtime variables
variable_tool_2_offset_x = 0									    #set on startup from variables.cfg
variable_tool_2_offset_y = 0									    #set on startup from variables.cfg	
variable_tool_2_offset_z = 0								    	#set on startup from variables.cfg
variable_tool_2_filament_is_parked = 0
variable_tool_2_filament_park_t_stamp = -456789

#T3

variable_tool_3_filament_park = 1                                     #Filament park/retract filament when tool parked 0=no, 1=yes
#variable_tool_3_filament_prime_d = 15                              #Filament prime distance mm
variable_tool_3_prime = 2                                      # 0=never, 1=always, 2=yes if tool loaded first time on print or tool has been parked for a defined time
variable_tool_3_prime_park_time = 20                           # minutes
variable_tool_3_pos_x = 176										#Absolute inital park x-position
variable_tool_3_pa = 0.04 #0.025
variable_tool_3_filament_park_t_stamp = -456789
variable_tool_3_bump_temp = 5

#runtime variables
variable_tool_3_offset_x = 0									    #set on startup from variables.cfg
variable_tool_3_offset_y = 0									    #set on startup from variables.cfg	
variable_tool_3_offset_z = 0								    	#set on startup from variables.cfg
variable_tool_3_filament_is_parked = 0
variable_tool_3_filament_park_t_stamp = -456789

#T4

variable_tool_4_filament_park = 1                                     #Filament park/retract filament when tool parked 0=no, 1=yes
#variable_tool_4_filament_prime_d = 15                              #Filament prime distance mm
variable_tool_4_prime = 2                                      # 0=never, 1=always, 2=yes if tool loaded first time on print or tool has been parked for a defined time
variable_tool_4_prime_park_time = 20                           # minutes
variable_tool_4_pos_x = 228										#Absolute inital park x-position
variable_tool_4_pa = 0.04 #0.025
variable_tool_4_bump_temp = 5

#runtime variables
variable_tool_4_offset_x = 0									    #set on startup from variables.cfg
variable_tool_4_offset_y = 0									    #set on startup from variables.cfg	
variable_tool_4_offset_z = 0								    	#set on startup from variables.cfg
variable_tool_4_filament_is_parked = 0
variable_tool_4_filament_park_t_stamp = -456789

#T5

variable_tool_5_filament_park = 1                                     #Filament park/retract filament when tool parked 0=no, 1=yes
#variable_tool_5_filament_prime_d = 15                              #Filament prime distance mm
variable_tool_5_prime = 2                                     # 0=never, 1=always, 2=yes if tool loaded first time on print or tool has been parked for a defined time
variable_tool_5_prime_park_time = 20                           # minutes
variable_tool_5_pos_x = 280										#Absolute inital park x-position
variable_tool_5_pa = 0.04 #0.025
variable_tool_5_bump_temp = 5

#runtime variables
variable_tool_5_offset_x = 0									    #set on startup from variables.cfg
variable_tool_5_offset_y = 0									    #set on startup from variables.cfg	
variable_tool_5_offset_z = 0								    	#set on startup from variables.cfg
variable_tool_5_filament_is_parked = 0
variable_tool_5_filament_park_t_stamp = -456789

gcode:

####

#[servo my_servo]
#pin: PC13
#minimum_pulse_width: 0.0006
#maximum_pulse_width: 0.0024
#initial_angle: 95

####

[save_variables]
filename:  ~/printer_data/config/variables.cfg

[delayed_gcode GET_VARIABLES_FROM_FILE]
initial_duration: 1
gcode:
    {action_respond_info("Loading Tool Change Variables")}
	#Shutdown status
	{% set svv = printer.save_variables.variables %}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=current_tool VALUE={svv.current_tool|int}
    SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=next_tool VALUE={svv.current_tool|int}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=loaded VALUE={svv.loaded|int}
	SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE=reset_after_cal VALUE={svv.reset_after_cal|int}
	#{% if svv.active_extruder != "extruder" %}
		#SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE={svv.active_extruder}
	#{% endif %}
    
    {% set candidates= "extruder", "extruder1", "extruder2", "extruder3", "extruder4", "extruder5", "extruder6", "extruder7" %}
    {% set num_of_tools = printer.heaters.available_heaters|select("in", candidates )|list|length %}
    # testing
    #{% set num_of_tools = 3 %}
    # testing
    SET_GCODE_VARIABLE MACRO=PRINTER_VAR VARIABLE=num_of_tools VALUE={num_of_tools}
    SET_GCODE_VARIABLE MACRO=PRINTER_VAR VARIABLE=has_chamber VALUE={printer.heaters.available_sensors|select("in", "temperature_sensor chamber_temp")|list|length}

	#get offsets
	{% set i = num_of_tools %}
	{% for i in range(1, i) %}
		{% set i_xyz = "x", "y", "z" %}
		{% set j = 3 %}
        
        {% set var = "tool_%s_filament_park" % ( i|string ) %}
        #educated quess that is the filament parked
        SET_GCODE_VARIABLE MACRO=_TOOL_CHANGE_VAR VARIABLE=tool_{i}_filament_is_parked VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int}
        
		{% for j in range(j) %}
			{% set var = "tool_%s_offset_%s" % ( i|string, i_xyz[j] ) %}
			SET_GCODE_VARIABLE MACRO=_TOOL_CHANGE_VAR VARIABLE=tool_{i}_offset_{i_xyz[j]} VALUE={printer.save_variables.variables[var]|float}
		{% endfor %}
	{% endfor %}
	#set offsets, activate extruder
	{% if svv.loaded|int == 1 %}
        #{% set offset_x= "svv.tool_%s_offset_x" % (svv.current_tool|string) %}                               #get current tool x offset
        #{% set offset_y= "svv.tool_%s_offset_y" % (svv.current_tool|string) %}                               #get current tool y offset
        #{% set offset_z= "svv.tool_%s_offset_z" % (svv.current_tool|string) %}                               #get current tool z offset
		#SET_GCODE_OFFSET X={offset_x|float} Y={offset_y|float}
        #SET_GCODE_OFFSET Z_ADJUST={offset_z|float}
        #{% set c_extruder= "extruder%s" % (svv.current_tool|string) %}                                     #get current tool name
        {% if svv.current_tool|int == 0 %}                                                                                #set requested extruder name
            {% set c_extruder = "extruder" %}
        {% else %}
            {% set c_extruder = ("extruder%s" % svv.current_tool) %}
            {% set var = "tool_%s_offset_z" % svv.current_tool %}
            SET_GCODE_OFFSET Z_ADJUST={printer.save_variables.variables[var]}                                                              #Adjust Z offset
        {% endif %}
    	ACTIVATE_EXTRUDER extruder={c_extruder}
		SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE={c_extruder}
        #SET_GCODE_OFFSET Z_ADJUST=printer.save_variables.variables.tool_{svv.current_tool}_offset_z                                                              #Adjust Z offset
        
	{% endif %}

	#set tool change config for unload
    SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=y_max VALUE={printer["gcode_macro PRINTER_VAR"].print_area[3]}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=tool_park_y VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].tool_park_y}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=z_rise VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].z_rise}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=sled_dist VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].sled_dist}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=sled_x_correction VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].sled_x_correction}
	#SET_GCODE_VARIABLE MACRO=_TOOL_CHANGE VARIABLE=servo VALUE='"{printer["gcode_macro _TOOL_CHANGE_VAR"].servo}"'
	#SET_GCODE_VARIABLE MACRO=_TOOL_CHANGE VARIABLE=servo_delay VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].servo_delay}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=unlock_angle VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].unlock_angle}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=lock_angle VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].lock_angle}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=angle_min VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].angle_min}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=angle_max VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].angle_max}
    SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=lock_speed VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].lock_speed}
    SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=lock_stepper_current VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].lock_stepper_current}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=motion_fast VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].motion_fast}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=motion_slow VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].motion_slow}
    SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=motion_acceleration VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].motion_acceleration}
	#SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=filament_park_temp VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].filament_park_temp}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=filament_park_d VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].filament_park_d}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=filament_prime_d VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].filament_prime_d}
	#SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=filament_prime_pos VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].filament_prime_pos}
	#SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=filament_prime_cool_t VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].filament_prime_cool_t}
	#SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=retraction VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].retraction}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=e_speed VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].e_speed|int}
	#SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=e_speed_slow VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].e_speed_slow|int}
	#SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=slow_acc VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].slow_acc}

    #set tool change config for load
    SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=y_max VALUE={printer["gcode_macro PRINTER_VAR"].print_area[3]}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=tool_park_y VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].tool_park_y}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=z_rise VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].z_rise}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=sled_dist VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].sled_dist}
	SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=sled_x_correction VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].sled_x_correction}
	#SET_GCODE_VARIABLE MACRO=_TOOL_CHANGE VARIABLE=servo VALUE='"{printer["gcode_macro _TOOL_CHANGE_VAR"].servo}"'
	#SET_GCODE_VARIABLE MACRO=_TOOL_CHANGE VARIABLE=servo_delay VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].servo_delay}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=unlock_angle VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].unlock_angle}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=lock_angle VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].lock_angle}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=angle_min VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].angle_min}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=angle_max VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].angle_max}
    SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=lock_speed VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].lock_speed}
    SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=lock_stepper_current VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].lock_stepper_current}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=motion_fast VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].motion_fast}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=motion_slow VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].motion_slow}
    SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=motion_acceleration VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].motion_acceleration}
	#SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=filament_park_temp VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].filament_park_temp}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=filament_park_d VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].filament_park_d}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=filament_prime_d VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].filament_prime_d}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=filament_prime_pos VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].filament_prime_pos}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=filament_prime_cool_t VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].filament_prime_cool_t}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=retraction VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].retraction}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=e_speed VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].e_speed|int}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=e_speed_slow VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].e_speed_slow|int}
	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=slow_acc VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].slow_acc}

	#SET_GCODE_VARIABLE MACRO=_PREHEAT_TOOLS VARIABLE=tc_min_temp VALUE={printer["gcode_macro _TOOL_CHANGE_VAR"].tc_min_temp}
    

    

    {action_respond_info("Tool Change Variables Loaded")}


####	

[gcode_macro T0]
description: Set variables for tool change macro.
            Paremeter P=00 > Do not park the filament, nor prime the next nozzle, nor heat the hotends.
            P=10 > Heat and park the leaving hotend filament, don't heat or prime the next hotend.
            P=01 > Don't heat or park leaving hotend filament, heat and prime next hotend.
            description: P=11 > Heat and park the leaving hotend filament, heat and prime next hotend. (Default)

variable_next_tool= 0
#variable_park = 0

gcode:

    
    {% set var = "tool_%s_filament_park" % printer["gcode_macro TOOL_UNLOAD"].current_tool %}
    #{action_respond_info("park = %i" % printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10)}
    {% set park = printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10 %}
    {% set var = "tool_%s_filament_is_parked" % next_tool %}
    {% set park = park + printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int %}
    
    {% set park = params.P|default(park)|string %}
    _TOOL_CHANGE T={next_tool} P={park}
    #{action_respond_info("park = %s" % park|string )}

####	

[gcode_macro T1]
description: Same as T0

variable_next_tool= 1

gcode:

    {% set var = "tool_%s_filament_park" % printer["gcode_macro TOOL_UNLOAD"].current_tool %}
    #{action_respond_info("park = %i" % printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10)}
    {% set park = printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10 %}
    {% set var = "tool_%s_filament_is_parked" % next_tool %}
    {% set park = park + printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int %}
    
    {% set park = params.P|default(park)|string %}
    _TOOL_CHANGE T={next_tool} P={park}
    #{action_respond_info("park = %s" % park|string )}

####	

[gcode_macro T2]
description: Same as T0

variable_next_tool= 2

gcode:

    {% set var = "tool_%s_filament_park" % printer["gcode_macro TOOL_UNLOAD"].current_tool %}
    #{action_respond_info("park = %i" % printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10)}
    {% set park = printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10 %}
    {% set var = "tool_%s_filament_is_parked" % next_tool %}
    {% set park = park + printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int %}
    
    {% set park = params.P|default(park)|string %}
    _TOOL_CHANGE T={next_tool} P={park}
    #{action_respond_info("park = %s" % park|string )}

####	

[gcode_macro T3]
description: Same as T0

variable_next_tool= 3

gcode:

    {% set var = "tool_%s_filament_park" % printer["gcode_macro TOOL_UNLOAD"].current_tool %}
    #{action_respond_info("park = %i" % printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10)}
    {% set park = printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10 %}
    {% set var = "tool_%s_filament_is_parked" % next_tool %}
    {% set park = park + printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int %}
    
    {% set park = params.P|default(park)|string %}
    _TOOL_CHANGE T={next_tool} P={park}
    #{action_respond_info("park = %s" % park|string )}

####

[gcode_macro T4]
description: Same as T0

variable_next_tool= 4

gcode:

    {% set var = "tool_%s_filament_park" % printer["gcode_macro TOOL_UNLOAD"].current_tool %}
    #{action_respond_info("park = %i" % printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10)}
    {% set park = printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10 %}
    {% set var = "tool_%s_filament_is_parked" % next_tool %}
    {% set park = park + printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int %}
    
    {% set park = params.P|default(park)|string %}
    _TOOL_CHANGE T={next_tool} P={park}
    #{action_respond_info("park = %s" % park|string )}

####	

[gcode_macro T5]
description: Same as T0

variable_next_tool= 5

gcode:

    {% set var = "tool_%s_filament_park" % printer["gcode_macro TOOL_UNLOAD"].current_tool %}
    #{action_respond_info("park = %i" % printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10)}
    {% set park = printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 10 %}
    {% set var = "tool_%s_filament_is_parked" % next_tool %}
    {% set park = park + printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int %}
    
    {% set park = params.P|default(park)|string %}
    _TOOL_CHANGE T={next_tool} P={park}
    #{action_respond_info("park = %s" % park|string )}

####

[gcode_macro _TOOL_CHANGE]
description: 

#variable_next_tool= 0

gcode:
    {% set next_tool = params.T|default(-1)|int %}
    {% if next_tool >= 0 and next_tool < printer["gcode_macro PRINTER_VAR"].num_of_tools|int %}
        #SAVE_GCODE_STATE NAME=tool_change
        #{action_respond_info("params.P = %s" % params.P|string )}
        {% set park = params.P|default(11)|int %}
        {% if park == 0 or park == 00  %}
            {% set park = 0, 0 %}
        {% elif park == 1 or park == 01 %}
            {% set park = 0, 1 %}
        {% elif park == 10 %}
            {% set park = 1, 0 %}
        {% else %}
            {% set park = 1, 1 %}
        {% endif %}
        #{action_respond_info("park = %s" % park|string )}
        #{action_respond_info("park[0] = %i, park[1] = %i" % (park[0]|int, park[1]|int) )}

        {% if next_tool == printer["gcode_macro TOOL_UNLOAD"].current_tool and printer["gcode_macro TOOL_LOAD"].loaded == 1 %}
            {action_respond_info("Tool already loaded")}
            M118 Tool already loaded
    	{% elif 'xy' not in printer.toolhead.homed_axes %}
    		{action_respond_info("Please home XY first")}
            M118 Please home XY first
    	{% else %}

            #SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=current_x VALUE={printer["tmc2209 stepper_x"].run_current|float}
            #SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=current_y VALUE={printer["tmc2209 stepper_y"].run_current|float}
        	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=next_tool VALUE={next_tool}
            {% if next_tool|int == 0 %}                                                                                 #set requested extruder name
                {% set c_extruder = "extruder" %}
            {% else %}
                {% set c_extruder = ("extruder%s" % next_tool) %}
            {% endif %}
            
            {% set var = "tool_%s_prime" % (next_tool|string) %}       
            {% set prime = printer["gcode_macro _TOOL_CHANGE_VAR"][var] %}
            
            {% set start_temp = printer[c_extruder].target %}
            
            {% if park[1]|int == 1 or prime|int == 1 %}
                _HEAT_TOOL T={next_tool}
                SET_FAN_SPEED FAN=dock_cooling_fan SPEED=1
            {% endif %}
            SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=direct_change VALUE=1
            #{action_respond_info("park[0] = %i" % park[0] )}
            #_LOWER_STEPPER_CURRENTS O=1
            
            {% if printer["gcode_macro _START_PRINT"].printing == 1 %}
                {% set save_z = printer.gcode_move.gcode_position.z|float %}
                G91
                #G0 Z{ ((printer.configfile.config.stepper_z.position_max|float - 1 - printer.gcode_move.gcode_position.z|float), 2)|min } F1000
                G90
            {% endif %}
            _LOWER_STEPPER_CURRENTS O=1
            TOOL_UNLOAD P={park[0]|int}
            #{action_respond_info("park[1] = %i" % park[1] )}
            TOOL_LOAD P={park[1]|int}
            _LOWER_STEPPER_CURRENTS O=0
            #_FILAMENT_CHECK
            SET_HEATER_TEMPERATURE HEATER={c_extruder} TARGET={start_temp}

            _FILAMENT_CHECK

            #Tool change counter
            {% set number = printer.save_variables.variables[c_extruder] + 1 %}
            SAVE_VARIABLE VARIABLE={c_extruder} VALUE={number}

            {% if save_z is defined %}
                G90
                #G1 X{save_x} Y{save_y} F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_fast}
                #G1 Z{save_z}
            {% endif %}
    	{% endif %}

        #RESTORE_GCODE_STATE NAME=tool_change MOVE=0
	{% else %}
		{action_respond_info("Valid parameter not given. T=0-%i" % (printer["gcode_macro PRINTER_VAR"].num_of_tools|int -1))}           
	{% endif %}

####

[gcode_macro _HEAT_TOOL]
description: Heat extruder above min temp for tool change or calibration. T= tool number, W= 1/0 wait min temp or not.

variable_hyst = 2
variable_bump_temp = 0

gcode:

    {% set tool = params.T|default(0) %}
    {% set wait = params.W|default(0) %}
    
    
    {% if tool|int == 0 %}                                                                                 #set requested extruder name
        {% set c_extruder = "extruder" %}
	{% else %}
        {% set c_extruder = ("extruder%s" % params.T) %}
	{% endif %}
    {% set temp = params.S|default((printer["gcode_macro _TOOL_CHANGE_VAR"].tc_min_temp|float, printer[c_extruder].target|float)|max) %}

	{action_respond_info("Preheat check for %s" % c_extruder )}

    {% if printer[c_extruder].target < temp %}
    	{action_respond_info("Heating %s" % c_extruder )}
        SET_HEATER_TEMPERATURE HEATER={c_extruder} TARGET={temp}
	{% endif %}
    {% if wait|int == 1 %}
    	{action_respond_info("Heating %s, please wait..." % c_extruder )}
        #TEMPERATURE_WAIT SENSOR={c_extruder} MINIMUM={ temp - hyst } MAXIMUM={ temp + hyst }
        TEMPERATURE_WAIT SENSOR={c_extruder} MINIMUM={ temp - hyst - bump_temp }
	{% endif %}
    SET_GCODE_VARIABLE MACRO=_HEAT_TOOL VARIABLE=bump_temp VALUE=0

####
	
[gcode_macro TOOL_UNLOAD]
description: Unload tool for tool change, homing, probing etc.

#Variables, set in startup (in sake of a cleaner code)
variable_y_max = 0                                     #print area
variable_tool_park_y = 0								#mm, Added to the start_y
variable_z_rise= 0
variable_sled_dist= 0						
variable_sled_x_correction = 0
#variable_servo= "my_servo"
#variable_servo_delay= 0									#ms
variable_angle_min= 0						    		#degrees
variable_angle_max= 0				    			    #degrees
variable_unlock_angle= 0								#degrees
variable_lock_angle= 0									#degrees
variable_lock_angle_relief= 5							#degrees
variable_lock_speed= 50
variable_lock_stepper_current= 1.0
variable_motion_fast= 1000									#mm/min
variable_motion_slow= 0									#mm/min
variable_motion_acceleration= 10000
#variable_filament_park_temp= 0
variable_filament_park_d= 0								#mm
variable_filament_prime_d= 0								#mm
#variable_filament_prime_pos= 0							#mm
#variable_filament_prime_cool_t= 0						#ms
#variable_retraction= 0									#mm
#variable_anti_ooze= 0.3									#mm
variable_e_speed= 0										#mm/min
#variable_e_speed_slow= 0								#mm/min
#variable_slow_acc= 0									#mm/s^2

#runtime variables defined in Tn or Startup
#variable_loaded= 1
#variable_direct_change= 0							#defined in T0/T1/...
variable_next_tool= 0									#defined in T0/T1/...
#variable_pos_x= 0						    			#defined in T0/T1/...
#variable_fys_tool= 0									#defined in T0/T1/... saved over power cycle
variable_current_tool= 0								#saved over power cycle
#variable_old_pos_x= 20									#saved over power cycle
#variable_offset_z_old= 0                               #saved over power cycle
#Gcode offsets for extruders
#variable_offset_x= 0				  				 	#defined in T0/T1/...
#variable_offset_y= 0				  				 	#defined in T0/T1/...
#variable_offset_z= 0				  					#defined in T0/T1/...
#variable_pa= 0.0

gcode:
	
	{% if printer["gcode_macro TOOL_LOAD"].loaded == 0 %}
        {action_respond_info("Tool already unloaded")}
    	SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=direct_change VALUE=0
		{action_respond_info("direct_change VALUE=0")}
	{% elif 'xy' not in printer.toolhead.homed_axes %}
		{action_respond_info("Please home XY first")}
	#{% elif next_tool == current_tool and printer["gcode_macro OFFSET_CAL"].start_tool|int == -2 %}
        #G0 E{filament_park_d-3} F{e_speed}
        #SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=start_tool VALUE=-1
	{% else %}
		{action_respond_info("Tool unload start")}

        {% set set_acceleration = printer.toolhead.max_accel|float %}
        #{% set speed_factor = printer.gcode_move.speed_factor|float %}
        
        SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=set_acceleration VALUE={set_acceleration}
        #SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=speed_factor VALUE={speed_factor}
        
        SET_VELOCITY_LIMIT ACCEL={motion_acceleration}
        #M220 S100
        #MANUAL_STEPPER STEPPER=lock_stepper SET_POSITION=0
        #MANUAL_STEPPER STEPPER=lock_stepper MOVE=130 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=0                                                              #Home lock stepper
		SET_GCODE_OFFSET X=0 Y=0		
        
        {% set park_filament = params.P|default(1) %}
        {% set ctpos = "tool_%s_pos_x" % (current_tool|string) %}                               #get current tool park x pos
        {% set ctpos = printer["gcode_macro _TOOL_CHANGE_VAR"][ctpos] %}
        
        G90     
    	G0 X{ctpos + sled_x_correction} Y{y_max} F{motion_fast}

        #Following have to be in this spot to avoid filament runout detection
        SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=loaded VALUE=0
        _LOWER_STEPPER_CURRENTS O=1
        
        #Always rehome lock stepper to keep it well positioned for the next tool change
        SET_TMC_CURRENT STEPPER=lock_stepper CURRENT=0.7
        MANUAL_STEPPER STEPPER=lock_stepper MOVE=115 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=0
        MANUAL_STEPPER STEPPER=lock_stepper SET_POSITION={angle_max}
        MANUAL_STEPPER STEPPER=lock_stepper MOVE={lock_angle} SPEED=50 SYNC=0

        {% set f_parked = "tool_%s_filament_is_parked" % (current_tool|string) %}
        {% if park_filament|int == 1 %}
            {action_respond_info("Filament parking")}
            {% set start_temp = printer[printer.extruder.motion_queue].target|float %}
            M83																					#extruder to relative mode
            _HEAT_TOOL T={current_tool} W=1
            G0 Y{y_max + tool_park_y} X{ctpos} E-{filament_park_d} F{motion_slow}
            SET_FAN_SPEED FAN=dock_cooling_fan SPEED=1
            SET_HEATER_TEMPERATURE HEATER={printer.extruder.motion_queue} TARGET={start_temp}
            SET_GCODE_VARIABLE MACRO=_TOOL_CHANGE_VAR VARIABLE={f_parked} VALUE=1
        {% else %}
            G0 Y{y_max + tool_park_y} X{ctpos} F{motion_slow}
            {% if printer["gcode_macro OFFSET_CAL"].start_tool|int == -1 %}
                SET_GCODE_VARIABLE MACRO=_TOOL_CHANGE_VAR VARIABLE={f_parked} VALUE=0
            {% endif %}
        {% endif %}
		M400
        
        SET_TMC_CURRENT STEPPER=lock_stepper CURRENT={lock_stepper_current}
        MANUAL_STEPPER STEPPER=lock_stepper MOVE={unlock_angle-5} SPEED={lock_speed}					#release
        MANUAL_STEPPER STEPPER=lock_stepper MOVE={unlock_angle} SPEED={lock_speed}                 	#lock relief
        MANUAL_STEPPER STEPPER=lock_stepper ENABLE=0
        
        #See if dock fan have to be turned on
        {% if printer["gcode_macro PRINTER_VAR"].has_chamber|int == 1 %}
            {% set chamber_temp = printer["temperature_sensor chamber_temp"].temperature|float %}
        {% else %}
            {% set chamber_temp = 0 %}
        {% endif %}
        #check unloaded extruder, heated/heating? If heated/heating, fan should turn on. Don't start if chamber sensor defined and extruder temp below chamber temp + 5
        {% if (printer[printer.extruder.motion_queue].temperature, printer[printer.extruder.motion_queue].target)|max > (printer.configfile.config["heater_fan hotend_fan"].heater_temp|float, chamber_temp + 5 )|max %}
            SET_FAN_SPEED FAN=dock_cooling_fan SPEED=1
        {% endif %}

		G0 Y{y_max + sled_dist + printer["gcode_macro _TOOL_CHANGE_VAR"].tc_arc_radius} X{ctpos + sled_x_correction} F{motion_slow}
		{% if printer["gcode_macro OFFSET_CAL"].start_tool|int == -1 and printer["gcode_macro TOOL_UNLOAD"].current_tool != 0 %} 			          #don't set Z-offset for T0 or tool offsets cal
            {% set offset_z= "tool_%s_offset_z" % (current_tool|string) %}                                                                           #get current tool z offset
            SET_GCODE_OFFSET Z_ADJUST={ (printer["gcode_macro _TOOL_CHANGE_VAR"][offset_z] * -1) }                                                    #Un-adjust Z offset
		{% endif %}
        #If tool is only dropped off, no new load
        {% if printer["gcode_macro TOOL_LOAD"].direct_change|int == 0 %}
            #MANUAL_STEPPER STEPPER=lock_stepper MOVE={angle_min + 2} SPEED={lock_speed}

            #SET_TMC_CURRENT STEPPER=stepper_x CURRENT={current_x}
            #SET_TMC_CURRENT STEPPER=stepper_y CURRENT={current_y}
            #SET_TMC_CURRENT STEPPER=lock_stepper CURRENT=0.7
            #MANUAL_STEPPER STEPPER=lock_stepper ENABLE=0
            #G90
    		G0 Y{printer["gcode_macro PRINTER_VAR"].print_area[3]} F{motion_slow}
            SET_VELOCITY_LIMIT ACCEL={set_acceleration}
            #M220 S{speed_factor}
        {% else %}
            {% set arc = printer["gcode_macro _TOOL_CHANGE_VAR"].tc_arc_radius %}
            {% set arc_x_end = ctpos + sled_x_correction %}
            {% set arc_y_end = y_max + sled_dist %}
            #Arc move (faster?)
            SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro _TOOL_CHANGE_VAR"].slow_acc}
            {% if printer["gcode_macro TOOL_LOAD"].next_tool > current_tool %}
                G3 X{arc_x_end + arc} Y{arc_y_end} I{arc} J0 F{motion_slow}
            {% else %}
                G2 X{arc_x_end - arc} Y{arc_y_end} I-{arc} J0 F{motion_slow}
            {% endif %}
            
		{% endif %}
        #G90
        _LOWER_STEPPER_CURRENTS O=0
        #SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=loaded VALUE=0
        #Save state for possible restart
        SAVE_VARIABLE VARIABLE=loaded VALUE=0
        #UPDATE_DELAYED_GCODE ID=dock_cooling_fan_control_check DURATION=1
        
        {% if printer["gcode_macro _START_PRINT"].printing == 1 %}
            {% set var = "tool_%s_filament_park_t_stamp" % current_tool %}
        	SET_GCODE_VARIABLE MACRO=_TOOL_CHANGE_VAR VARIABLE={var} VALUE={printer.idle_timeout.printing_time}
        {% endif %}
	{% endif %}

####
	
[gcode_macro TOOL_LOAD]
description: Load tool

#Variables, set in startup (in sake of a simpler code)
variable_y_max = 0                                     #print area
variable_tool_park_y= 0								#mm, Added to the start_y
variable_z_rise= 0
variable_sled_dist= 0						
variable_sled_x_correction = 0
#variable_servo= "my_servo"
#variable_servo_delay= 0									#ms
variable_angle_min= 0						    		#degrees
variable_angle_max= 0				    			    #degrees
variable_unlock_angle= 0								#degrees
variable_lock_angle= 0									#degrees
variable_lock_speed= 50
variable_lock_stepper_current= 1.0
variable_current_x= 1
variable_current_y= 1
variable_motion_fast= 1000									#mm/min
variable_motion_slow= 0									#mm/min
variable_motion_acceleration= 5000
variable_set_acceleration= 5000
#variable_filament_park_temp= 0
variable_filament_park_d= 0								#mm
variable_filament_prime_d= 0								#mm
variable_filament_prime_pos= 0							#mm
variable_filament_prime_cool_t= 0						#s
variable_retraction= 0									#mm
#variable_anti_ooze= 0.3									#mm
variable_e_speed= 0										#mm/min
variable_e_speed_slow= 0								#mm/min
variable_slow_acc= 0									#mm/s^2
#variable_speed_factor = 100

#runtime variables defined in Tn or Startup
#variable_current_tool= 0								#saved over power cycle
variable_loaded= 1
variable_direct_change= 0							#defined in T0/T1/...
variable_next_tool= 0									#defined in T0/T1/...
#variable_pos_x= 0						    			#defined in T0/T1/...
#variable_fys_tool= 0									#defined in T0/T1/... saved over power cycle

#variable_old_pos_x= 20									#saved over power cycle
#variable__old= 0                               #saved over power cycle
#Gcode offsets for extruders
#variable_offset_x= 0				  				 	#defined in T0/T1/...
#variable_offset_y= 0				  				 	#defined in T0/T1/...
#variable_offset_z= 0				  					#defined in T0/T1/...
#variable_pa= 0.0

gcode:
	
	{% if loaded == 1 %}
        #{action_respond_info("Tool already loaded")}
        M118 "Tool already loaded"
	{% elif 'xy' not in printer.toolhead.homed_axes %}
		{action_respond_info("Please home XY first")}
	{% else %}
        
        _LOWER_STEPPER_CURRENTS O=1

		{action_respond_info("Tool load start")}

        {% if next_tool|int == 0 %}                                                                                 #set requested extruder name
            {% set c_extruder = "extruder" %}
        {% else %}
            {% set c_extruder = ("extruder%s" % next_tool) %}
        {% endif %}

        {% set start_temp = printer[c_extruder].target %}

        {% set park = params.P|default(1) %}
        {% set var = "tool_%s_pos_x" % (next_tool|string) %}       
        {% set pos_x = printer["gcode_macro _TOOL_CHANGE_VAR"][var] %}
        {% set var = "tool_%s_offset_x" % (next_tool|string) %}       
        {% set offset_x = printer["gcode_macro _TOOL_CHANGE_VAR"][var] %}
        {% set var = "tool_%s_offset_y" % (next_tool|string) %}       
        {% set offset_y = printer["gcode_macro _TOOL_CHANGE_VAR"][var] %}
        {% set var = "tool_%s_offset_z" % (next_tool|string) %}       
        {% set offset_z = printer["gcode_macro _TOOL_CHANGE_VAR"][var] %}
        {% set var = "tool_%s_pa" % (next_tool|string) %}       
        {% set pa = printer["gcode_macro _TOOL_CHANGE_VAR"][var] %}
        {% set var = "tool_%s_prime_park_time" % (next_tool|string) %}       
        {% set prime_park_time = printer["gcode_macro _TOOL_CHANGE_VAR"][var]|int * 60 %}
        {% set var = "tool_%s_filament_park_t_stamp" % (next_tool|string) %}       
        {% set filament_park_t_stamp = printer["gcode_macro _TOOL_CHANGE_VAR"][var] %}
        {% set var = "tool_%s_prime" % (next_tool|string) %}       
        {% set prime = printer["gcode_macro _TOOL_CHANGE_VAR"][var] %}

        {% if park|int == 1 %} #or prime|int != 0 %}
            _HEAT_TOOL T={next_tool}
        {% endif %}
        
        {% if direct_change == 0 %}
            {% set set_acceleration = printer.toolhead.max_accel|float %}
            #{% set speed_factor = printer.gcode_move.speed_factor|float %}
            #SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE={set_acceleration} VALUE={set_acceleration}
            #M220 S100
            SET_VELOCITY_LIMIT ACCEL={motion_acceleration}
            _HOME_SLED
            #MANUAL_STEPPER STEPPER=lock_stepper MOVE=130 SPEED=50 STOP_ON_ENDSTOP=2 #SYNC=0     #Home lock stepper	
            #MANUAL_STEPPER STEPPER=lock_stepper SET_POSITION={unlock_angle}
            #MANUAL_STEPPER STEPPER=lock_stepper MOVE={unlock_angle} SPEED=50 SYNC=0
		{% endif %}

        {% if printer["gcode_macro _START_PRINT"].printing == 1 and printer[c_extruder].target > 0 %}
            {% set bump_temp = "tool_%s_bump_temp" % next_tool %}                               #get current tool park x pos
            {% set bump_temp = printer["gcode_macro _TOOL_CHANGE_VAR"][bump_temp] %}
            SET_HEATER_TEMPERATURE HEATER={c_extruder} TARGET={printer[c_extruder].target + bump_temp|int}
        {% else %}
            {% set bump_temp = 0 %}
		{% endif %}
        
        #MANUAL_STEPPER STEPPER=lock_stepper ENABLE=0
		G90																					#positioning to absolute mode
        
		SET_VELOCITY_LIMIT ACCEL={slow_acc}
        {% set arc = printer["gcode_macro _TOOL_CHANGE_VAR"].tc_arc_radius %}
		
        {% set arc_x_end = pos_x + sled_x_correction %}
        {% set arc_y_end = y_max + sled_dist + arc %}
        #No arc move if homing sled
        {% if direct_change == 0 %}
            G0 X{arc_x_end} F{motion_fast}
        #Arc move (faster?)
        {% elif printer["gcode_macro TOOL_LOAD"].next_tool > printer["gcode_macro TOOL_UNLOAD"].current_tool %}
            G0 X{arc_x_end - arc} F{motion_fast}
            G3 X{arc_x_end} Y{arc_y_end} I0 J{arc} F{motion_slow}
        {% else %}
            G0 X{arc_x_end + arc} F{motion_fast}
            G2 X{arc_x_end} Y{arc_y_end} I0 J{arc} F{motion_slow}
        {% endif %}
        
        SET_VELOCITY_LIMIT ACCEL={motion_acceleration}
		#G91																					#positioning to relative mode
		G0 Y{y_max + tool_park_y} X{pos_x + (sled_x_correction * -1)} F{motion_slow}
		M400


        MANUAL_STEPPER STEPPER=lock_stepper SET_POSITION={unlock_angle}
        MANUAL_STEPPER STEPPER=lock_stepper MOVE={lock_angle + printer["gcode_macro _TOOL_CHANGE_VAR"].lock_angle_relief} SPEED={lock_speed}		            #lock
        MANUAL_STEPPER STEPPER=lock_stepper MOVE={lock_angle} SPEED={lock_speed}				    #lock relief
        #SET_TMC_CURRENT STEPPER=lock_stepper CURRENT=0.2
        #G4 P{printer["gcode_macro _TOOL_CHANGE_VAR"].lock_wait_time}
        MANUAL_STEPPER STEPPER=lock_stepper ENABLE=0
        
        #MANUAL_STEPPER STEPPER=lock_stepper SET_POSITION=0        
    	ACTIVATE_EXTRUDER extruder={c_extruder}
		SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE={c_extruder}
        SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=loaded VALUE=1

        #apply extruder offsets if not calibrating offsets
		{% if printer["gcode_macro OFFSET_CAL"].start_tool|int == -1 %} 										#don't set offsets for tool offsets cal
			#{action_respond_info("Setting offsets")}
			SET_GCODE_OFFSET X={offset_x} Y={offset_y}                                                        #Adjust XY offsets
            SET_GCODE_OFFSET Z_ADJUST={offset_z}                                                              #Adjust Z offset
            SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={pa}
            {action_respond_info("Z-offset -> %.3f" % offset_z)}
            #{action_respond_info("Pressure Advance -> %.2f" % pa)}
        #{% elif printer["gcode_macro OFFSET_CAL"].start_tool|int == -2 %}
            #G0 E{filament_park_d-3} F{e_speed}
            #SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=start_tool VALUE=-1
		{% else %}
            #Offset calibration prosedures
			SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=iteration VALUE={printer["gcode_macro OFFSET_CAL"].iteration|int + 1 }
			SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=measured VALUE=0
            {% if printer["gcode_macro OFFSET_CAL"].iteration|int != -1 %}
                {action_respond_info("REPEAT @ TOOL_LOAD i = %i" % printer["gcode_macro OFFSET_CAL"].iteration|int )}
                UPDATE_DELAYED_GCODE ID=REPEAT DURATION=1
            {% endif %}
			#{action_respond_info("Start delay3")}
			#OFFSET_CAL T={printer["gcode_macro OFFSET_CAL_RUNTIME"].t_called}
		{% endif %}

		SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=current_tool VALUE={next_tool}
		SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=direct_change VALUE=0
		SAVE_VARIABLE VARIABLE=current_tool VALUE={next_tool}
        SAVE_VARIABLE VARIABLE=loaded VALUE=1
        
		#park
		#{% if printer["gcode_macro OFFSET_CAL"].start_tool|int == -1 and park == 1 %} 					#don't load filament for homing or tool offsets cal
        {% if printer["gcode_macro OFFSET_CAL"].start_tool|int == -1 and (prime|int == 1 or (prime == 2 and printer.idle_timeout.printing_time > (filament_park_t_stamp + prime_park_time) ) ) %}
            SET_GCODE_VARIABLE MACRO=_HEAT_TOOL VARIABLE=bump_temp VALUE={bump_temp}
            _HEAT_TOOL T={next_tool} W=1
            #_HEAT_TOOL T={next_tool}
            #TEMPERATURE_WAIT SENSOR={c_extruder} MINIMUM={printer[c_extruder].target - bump_temp}
            G0 X{pos_x + sled_x_correction} Y{y_max + filament_prime_pos} F{motion_slow}
            {% if park|int == 1 %}
                {action_respond_info("Unpark filament")}
                G0 E{filament_park_d} F{e_speed} 
            {% endif %}
            {action_respond_info("Prime")}
            #SET_GCODE_VARIABLE MACRO=PRIME_NOZZLE VARIABLE=bump_temp VALUE=bump_temp
            PRIME_NOZZLE
            #SET_HEATER_TEMPERATURE HEATER={c_extruder} TARGET={start_temp}
        {% elif park|int == 1 %}
            SET_GCODE_VARIABLE MACRO=_HEAT_TOOL VARIABLE=bump_temp VALUE={bump_temp}
            {action_respond_info("No prime, unpark filament")}
            _HEAT_TOOL T={next_tool} W=1
    		G0 Y{y_max} X{pos_x + sled_x_correction} E{filament_park_d} F{motion_slow}
            #MANUAL_STEPPER STEPPER=lock_stepper MOVE=110 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=0
            _LOWER_STEPPER_CURRENTS O=0
            #SET_HEATER_TEMPERATURE HEATER={c_extruder} TARGET={start_temp}
        {% else %}
            {action_respond_info("No prime, no unpark")}
            G0 Y{y_max} X{pos_x + sled_x_correction} F{motion_slow}
            #MANUAL_STEPPER STEPPER=lock_stepper MOVE=110 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=0
            _LOWER_STEPPER_CURRENTS O=0
            #SET_HEATER_TEMPERATURE HEATER={c_extruder} TARGET={start_temp}
		{% endif %}
        
        SET_HEATER_TEMPERATURE HEATER={c_extruder} TARGET={start_temp}

        #Always rehome lock stepper to keep it well positioned for the next tool change
        #MANUAL_STEPPER STEPPER=lock_stepper SET_POSITION={angle_max}
        #MANUAL_STEPPER STEPPER=lock_stepper MOVE={lock_angle} SPEED=50 SYNC=0
        
		G0 Y{y_max} X{pos_x + sled_x_correction} F{motion_slow}
		M400

		#{% if printer["gcode_macro OFFSET_CAL"].start_tool|int == -1 %} 	
    		#G91																					#positioning to relative mode
    		#G0 Z-{z_rise} F1000
    		#G0 E{retraction} F{e_speed}
    		#G90
        #{% endif %}

        SET_VELOCITY_LIMIT ACCEL={set_acceleration}
        #M220 S{speed_factor}
	{% endif %}

####

[gcode_macro PRIME_NOZZLE]

#variable_bump_temp = 0

gcode:

    {% if 'xy' not in printer.toolhead.homed_axes %}
        {action_respond_info("Please home XY first")}
    {% elif printer["gcode_macro TOOL_LOAD"].loaded == 0 %}
        {action_respond_info("No tool loaded")}
    {% else %}
        #SAVE_GCODE_STATE NAME=prime_nozzle
    
        {% set repeat = params.R|default(2)|int %}
        {% set current_tool = printer["gcode_macro TOOL_UNLOAD"].current_tool|int %}
        {% set fan_speed = printer.fan.speed %}
        {% if current_tool == 0 %}                                                                                 #set requested extruder name
            {% set c_extruder = "extruder" %}
        {% else %}
            {% set c_extruder = ("extruder%s" % current_tool) %}
        {% endif %}
        {% set start_temp = printer[c_extruder].target %}

        G90
        M83
        {% if printer.toolhead.position.y < printer["gcode_macro PRINTER_VAR"].print_area[3]|float + 1 %}
            _HEAT_TOOL T={printer["gcode_macro TOOL_LOAD"].next_tool}
            {% if printer["gcode_macro _START_PRINT"].printing == 1 %}
                {% set save_x = printer.gcode_move.gcode_position.x|float %}
                {% set save_y = printer.gcode_move.gcode_position.y|float %}
                {% set save_z = printer.gcode_move.gcode_position.z|float %}
                G91
                G0 Z{ ((printer.configfile.config.stepper_z.position_max|float - 1 - printer.gcode_move.gcode_position.z|float), 2)|min } F1000
                G90
            {% endif %}
            
            #G0 Y{printer["gcode_macro PRINTER_VAR"].print_area[3]} F4000
            {% set ctpos = "tool_%s_pos_x" % current_tool %}                               #get current tool park x pos
            {% set ctpos = printer["gcode_macro _TOOL_CHANGE_VAR"][ctpos] %}
        	G0 X{ctpos + printer["gcode_macro _TOOL_CHANGE_VAR"].sled_x_correction} Y{printer["gcode_macro PRINTER_VAR"].print_area[3]} F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_fast}
            #{action_respond_info("debug")}
            G0 Y{printer["gcode_macro PRINTER_VAR"].print_area[3] + printer["gcode_macro _TOOL_CHANGE_VAR"].filament_prime_pos} F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_slow}
            _HEAT_TOOL T={printer["gcode_macro TOOL_LOAD"].next_tool} W=1
        #TEMPERATURE_WAIT SENSOR={c_extruder} MINIMUM={printer[c_extruder].target - bump_temp}
        {% endif %}

        M106 S255
        
        {% for repeat in range(repeat) %}
            G0 Y{printer["gcode_macro PRINTER_VAR"].print_area[3] + printer["gcode_macro _TOOL_CHANGE_VAR"].filament_prime_pos} F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_fast}
            
    		#G0 E{filament_park_d-2} F{e_speed}
    		G0 E{printer["gcode_macro _TOOL_CHANGE_VAR"].filament_prime_d} F{printer["gcode_macro _TOOL_CHANGE_VAR"].e_speed_slow}
            G0 E-{printer["gcode_macro _TOOL_CHANGE_VAR"].retraction} F{printer["gcode_macro _TOOL_CHANGE_VAR"].e_speed}
            #{% if current_tool != printer["gcode_macro TOOL_LOAD"].next_tool and repeat == 0 %}
                #MANUAL_STEPPER STEPPER=lock_stepper MOVE=110 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=0
                #_LOWER_STEPPER_CURRENTS O=0
            #{% endif %}
    		G4 P{printer["gcode_macro _TOOL_CHANGE_VAR"].filament_prime_cool_t * 1000}
            G0 Y{printer["gcode_macro PRINTER_VAR"].print_area[3]} F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_slow}
            
        {% endfor %}
        
        M106 S{fan_speed * 255}
        SET_HEATER_TEMPERATURE HEATER={c_extruder} TARGET={start_temp}

        {% if save_x is defined %}
            G1 X{save_x} Y{save_y} F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_fast}
            G1 Z{save_z}
        {% endif %}
        #SET_GCODE_VARIABLE MACRO=PRIME_NOZZLE VARIABLE=bump_temp VALUE=0
        #RESTORE_GCODE_STATE NAME=prime_nozzle MOVE=0
                
    {% endif %}

####

[gcode_macro _FILAMENT_CHECK]
description:

gcode:

        #{action_respond_info("filament sensor detected state = %s" % printer["filament_switch_sensor toolhead_filament_sensor"].filament_detected)}
        {% if printer["filament_switch_sensor toolhead_filament_sensor"].filament_detected == False and
              printer["filament_switch_sensor toolhead_filament_sensor"].enabled == True and
              printer.idle_timeout.state == "Printing" and
              printer["gcode_macro OFFSET_CAL"].start_tool == -1 and
              printer["gcode_macro _START_PRINT"].printing == 1 %}
            {action_respond_info("Toolhead filament runout detected @ Tool change _FILAMENT_CHECK")}
            PAUSE
            #G1 E-110 F1000
        {% endif %}

####

[gcode_macro _HOME_SLED]
description:

gcode:
	{% if printer["gcode_macro TOOL_LOAD"].loaded == 1 %}
        {action_respond_info("Tool allready loaded")}
	{% elif 'xy' not in printer.toolhead.homed_axes %}
		{action_respond_info("Please home XY first")}
	{% else %}
        SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro _TOOL_CHANGE_VAR"].motion_acceleration}
        _LOWER_STEPPER_CURRENTS O=1
		{action_respond_info("Locktool homing start")}
        MANUAL_STEPPER STEPPER=lock_stepper SET_POSITION=0
        SET_TMC_CURRENT STEPPER=lock_stepper CURRENT=0.7
        MANUAL_STEPPER STEPPER=lock_stepper MOVE=-110 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=0     #Home lock stepper
        MANUAL_STEPPER STEPPER=lock_stepper ENABLE=0
        G90
        G0 X{printer["gcode_macro PRINTER_VAR"].print_area[2]} Y{printer["gcode_macro PRINTER_VAR"].print_area[3]} F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_fast / 2}
        #SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.7
        #SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.7
        SET_TMC_CURRENT STEPPER=lock_stepper CURRENT={printer["gcode_macro _TOOL_CHANGE_VAR"].lock_stepper_current}
        #SET_TMC_CURRENT STEPPER=lock_stepper CURRENT={printer["gcode_macro _TOOL_CHANGE_VAR"].lock_stepper_current}
        #MANUAL_STEPPER STEPPER=lock_stepper SET_POSITION={printer["gcode_macro _TOOL_CHANGE_VAR"].angle_min}
        #MANUAL_STEPPER STEPPER=lock_stepper MOVE={printer["gcode_macro _TOOL_CHANGE_VAR"].unlock_angle} SPEED=50 SYNC=0
        #MANUAL_STEPPER STEPPER=lock_stepper ENABLE=0
        G91
		G0 Y{printer["gcode_macro _TOOL_CHANGE_VAR"].sled_dist} F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_slow}
		SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro _TOOL_CHANGE_VAR"].slow_acc}
        G90
        G0 X{printer["gcode_macro _TOOL_CHANGE_VAR"].sled_min + printer["gcode_macro _TOOL_CHANGE_VAR"].sled_x_correction} F2000 #G0 X{printer["gcode_macro _TOOL_CHANGE_VAR"].sled_min} F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_slow / 3 }
		SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro _TOOL_CHANGE_VAR"].motion_acceleration}
        G0 Y{printer["gcode_macro PRINTER_VAR"].print_area[3]} F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_slow}
        G91
        G0 X-10 F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_slow}
        G0 Y{printer["gcode_macro _TOOL_CHANGE_VAR"].sled_dist} F{printer["gcode_macro _TOOL_CHANGE_VAR"].motion_slow}
        G90
        _LOWER_STEPPER_CURRENTS O=0

	{% endif %}
	
####

[delayed_gcode dock_cooling_fan_control_check]
initial_duration: 2

gcode:
    #get number of extruders for iteration
    {% set i = printer["gcode_macro PRINTER_VAR"].num_of_tools|int %}
    #namespace used because loop can not change external variable other way
    {% set dev = namespace(value=0) %}
    {% if printer["gcode_macro PRINTER_VAR"].has_chamber|int == 1 %}
        {% set chamber_temp = printer["temperature_sensor chamber_temp"].temperature|float %}
    {% else %}
        {% set chamber_temp = 0 %}
    {% endif %}
    
    
    {% for i in range(i) %}
        {% if i == 0 %}
            {% set c_extruder = "extruder" %}
        {% else %}
            {% set c_extruder = "extruder%s" % i|string %}
        {% endif %}
        #check each extruder, heated/heating and loaded? If heated/heating and not loaded, fan should turn on. Don't start if chamber sensor defined and extruder temp below chamber temp + 5
        {% if (printer[c_extruder].temperature, printer[c_extruder].target)|max < (printer.configfile.config["heater_fan hotend_fan"].heater_temp|float, chamber_temp + 5 )|max or
              printer.toolhead.extruder|string == c_extruder and printer["gcode_macro TOOL_LOAD"].loaded == 1 %}
            #Do nothing
        {% else %}
            #Fan on
            {% set dev.value = 1 %}
        {% endif %}
    {% endfor %}
    #If state differs, change state.
    {% if dev.value|int != printer["fan_generic dock_cooling_fan"].speed|int %}
        SET_FAN_SPEED FAN=dock_cooling_fan SPEED={dev.value}
    {% endif %}
    #Check again in 10s
    UPDATE_DELAYED_GCODE ID=dock_cooling_fan_control_check DURATION=10





