######################################################
#             Tool offsets calibration               #
######################################################

#Todo:
#
#

[gcode_macro _OFFSET_CAL_VAR]

variable_cube_center= 151.6, 150.1, 0                      #XYZ
variable_homing_point= 141, 150                        #XY
variable_cube_sizexy= 7.6
variable_safe_dist= 5
variable_cal_start_dist_xy= 2.5
variable_cal_start_dist_z= 0.8
variable_nozzle_clearance= 2.6
variable_z_crossing= 0.5
variable_cal_step= 0.01                              #XY  Z = step/4
variable_cal_step_time= 0.1
variable_cal_e_temp= 40 #200
variable_measure_spd_f = 2500 #10000
variable_measure_spd_s = 500
variable_z_offset_extra_switch = -0.02
variable_z_offset_extra_piezo = 0.00 #0.1
variable_results_decimals = 2                           #for XY only
variable_module_not_present_temp = 15

gcode:

####

[gcode_macro OFFSET_CAL]
description: default all, 1 sample. T=n one tool to calibrate. T=Z Calibrate only T0 Z-offset. S=n samples

variable_iteration= -1
variable_measured= 0
variable_start_tool = -1
variable_t_called= 0
variable_samples= 1
#variable_repeat_test_times= 10

gcode:
	{action_respond_info("OFFSET_CAL round %i" % printer["gcode_macro OFFSET_CAL"].iteration|int )}
    {% set t_called = params.T|default("ALL") %}
    
	{% if t_called == "ALL" or t_called == "Z" or (t_called|int > 0 and t_called|int < printer["gcode_macro PRINTER_VAR"].num_of_tools|int) or t_called == "REPEAT" and (samples >= 1 or samples <= 10) %}
		#{% set current_tool = printer["gcode_macro TOOL_UNLOAD"].current_tool %}
        {% set current_tool = 0 %}
        {% set fail = 0 %}
        {% if  printer["gcode_macro OFFSET_CAL"].start_tool|int == -1 %}													#init and preheat
            {action_respond_info("Starting Tool offset calibration.")}
			{% set samples = params.S|default(1) %}

            #SAVE_GCODE_STATE NAME=state_tool_cal
			SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=t_called VALUE='"{t_called}"'
			SET_GCODE_VARIABLE MACRO=ACCEPT_OFFSETS VARIABLE=t_called VALUE='"{t_called}"'
			SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE=t_called VALUE='"{t_called}"'
            SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=samples VALUE={samples}
            SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE=samples VALUE={samples}
			SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=start_tool VALUE={current_tool}
            
            #Heat tools needed
            _HEAT_TOOL T=0 #T0 always
			{% if t_called == "ALL" %}
                SET_FAN_SPEED FAN=dock_cooling_fan SPEED=1
                {action_respond_info("init Heat all")}
				{% set h = printer["gcode_macro PRINTER_VAR"].num_of_tools|int %}
				{% for h in range(1, h) %}

                #{% if h == 0 %}
                    #{% set c_extruder = "extruder" %}
                #{% else %}
                    {% set c_extruder = ("extruder%s" % h) %}
                #{% endif %}
                #See if module present
                {% if printer[c_extruder].temperature|float > printer["gcode_macro _OFFSET_CAL_VAR"].module_not_present_temp %}
                	#M104 T{h} S{printer["gcode_macro _OFFSET_CAL_VAR"].cal_e_temp|int}
                    _HEAT_TOOL T={h}
                {% endif %}
                
				{% endfor %}
                
			{% elif t_called != "Z" %}
				#M104 T0 S{printer["gcode_macro _OFFSET_CAL_VAR"].cal_e_temp|int}
                #_HEAT_TOOL
				#M104 T{t_called} S{printer["gcode_macro _OFFSET_CAL_VAR"].cal_e_temp|int}
                #{% if t_called == "Z" %}
                    #{% if current_tool != 0 %}
                        #_HEAT_TOOL T={current_tool}
                        #SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=next_tool VALUE=0
                	#{% endif %}
                #{% else %}
                    #{% if t_called == 0 %}
                        #{% set c_extruder = "extruder" %}
                    #{% else %}
                        {% set c_extruder = ("extruder%s" % t_called) %}
                    #{% endif %}
                    #See if module present
                    
                    {% if printer[c_extruder].temperature|float > printer["gcode_macro _OFFSET_CAL_VAR"].module_not_present_temp %}
                    	#M104 T{h} S{printer["gcode_macro _OFFSET_CAL_VAR"].cal_e_temp|int}
                        {action_respond_info("init Heat T-called")}
                        SET_FAN_SPEED FAN=dock_cooling_fan SPEED=1
                        _HEAT_TOOL T={t_called}
                    {% else %}
                        {action_respond_info("No Module on T%s installed" % t_called )}
                        {% set fail = 1 %}
                        SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE=t_called VALUE='"fail"'
                		_OFFSET_CALCULATE
                        #SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=start_tool VALUE=-1
                        #SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
                    {% endif %}
                
                    
                    #{% if current_tool != t_called|int or current_tool != 0 %}
                        #SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=next_tool VALUE=0
            		#{% endif %}
        		#{% endif %}
			{% endif %}
            {% if fail == 0 %}
                SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=next_tool VALUE=0
                BED_MESH_CLEAR
    			G28      																							#always home
            {% endif %}
            #TOOL_LOAD P=0
            #{action_respond_info("Heating")}
            #M109 T{current_tool} S{printer["gcode_macro _OFFSET_CAL_VAR"].cal_e_temp}
    		#{% if printer["gcode_macro TOOL_LOAD"].loaded == 1 %}
                #_HEAT_TOOL T={current_tool} W=1
              	#M83								                 													#extruder to relative mode														
          		#G0 E-{printer["gcode_macro TOOL_UNLOAD"].filament_park} F1000                                      #park filament
    		#{% endif %}
		{% endif %}
        {% if fail == 0 %}
        	{action_respond_info("samples = %s" % samples|string )}
            
            {% set current_tool = printer["gcode_macro TOOL_UNLOAD"].current_tool|int %}
            
            #{% if current_tool == 0 %}
                #{% set c_extruder = "extruder" %}
            #{% else %}
                #{% set c_extruder = ("extruder%s" % current_tool) %}
            #{% endif %}
    		{% if t_called == "Z" %}
                #{% if printer["gcode_macro TOOL_LOAD"].loaded == 0 %}           
                    #TOOL_LOAD P=0
                #{% endif %}
                SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE=samples VALUE=1
                #{action_respond_info("init Heat Z-called")}
                #_HEAT_TOOL T={current_tool} W=1
                #_HEAT_TOOL T=0 W=1
    			_MEASURE_START
    		#{% elif (current_tool == t_called|int or current_tool == 0 or t_called == "ALL") and measured == 0 %} #and printer[c_extruder].temperature|float > printer["gcode_macro _OFFSET_CAL_VAR"].module_not_present_temp %}			#Measure or not	  # or (t_called == "REPEAT" and i < repeat_test_times)
            {% elif measured == 0 %} #and printer[c_extruder].temperature|float > printer["gcode_macro _OFFSET_CAL_VAR"].module_not_present_temp %}			#Measure or not	  # or (t_called == "REPEAT" and i < repeat_test_times)
                #{% if printer["gcode_macro TOOL_LOAD"].loaded == 0 %}           
                    #TOOL_LOAD P=0
                #{% endif %}
                {action_respond_info("Heat and wait before measure start")}
                _HEAT_TOOL T={current_tool} W=1
    			_MEASURE_START
    		{% else %}

        		# init iteration round
        		{% set i = printer["gcode_macro OFFSET_CAL"].iteration|int %}
        		{% if  printer["gcode_macro OFFSET_CAL"].start_tool|int == -1 %}													#s = start tool / where we started from
        			{% set s = current_tool %}
        		{% else %}
        			{% set s = printer["gcode_macro OFFSET_CAL"].start_tool %}
        		{% endif %}		
        		#{% set c = current_tool %}
                {% set n = printer["gcode_macro PRINTER_VAR"].num_of_tools|int %}

            
                {% if t_called == "Z" %}
            		{% set ns = 1 %}
                {% else %}
                    {% set ns = printer["gcode_macro PRINTER_VAR"].num_of_tools|int * samples|int %}                                    #total number of trys to sample
                {% endif %}

                {action_respond_info("Total number of tests to measure %i" % ns )}
                {action_respond_info("i = %i" % i )}

              	{% if i >= ns - n %}   #{% if i >= ns - n and current_tool != 0 %}
                    {action_respond_info("Cool down drop-off")}
    				M104 T{current_tool} S0
                    {action_respond_info("i = %i, ns = %i" % (i, ns) )}
                    #SET_HEATER_TEMPERATURE HEATER={current_tool} TARGET=0
    			{% endif %}
    			#Calculate or Tool change?
    			{% if i + 1 == ns or fail == 1 %}
    				_OFFSET_CALCULATE
    			{% else %}
                    {% set i = (ns + i) % n %}
                    {action_respond_info("i remainder =  %i" % i )}
    				{% set nt = s + i + 1 %}														#nt = next tool to change

                    {% if nt == 0 %}
                        {% set c_extruder = "extruder" %}
                    {% else %}
                        {% set c_extruder = ("extruder%s" % nt) %}
                    {% endif %}
                    
    				{% if nt < n %}
    					{% if nt == t_called|int or t_called == "ALL" and printer[c_extruder].temperature|float > printer["gcode_macro _OFFSET_CAL_VAR"].module_not_present_temp %}
    						{action_respond_info("Change T%i" % nt )}				
    						T{nt} P=00
    					{% else %}
    						SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=iteration VALUE={printer["gcode_macro OFFSET_CAL"].iteration|int + 1 }
                            {action_respond_info("REPEAT @ OFFSET_CAL 1 i = %i" % printer["gcode_macro OFFSET_CAL"].iteration|int )}
                            #G4 P2000
                            UPDATE_DELAYED_GCODE ID=REPEAT DURATION=2
                            #G4 P1000
    					{% endif %}
    				{% else %}
    					{% set nt = nt - n %}                                                      #nt = next tool to change, but start from 0
    					{% if nt == t_called|int or nt == 0 or t_called == "ALL" and printer[c_extruder].temperature|float > printer["gcode_macro _OFFSET_CAL_VAR"].module_not_present_temp %}
    						{action_respond_info("Change T%i" % nt )}
    						T{nt} P=00
    					{% else %}
    						SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=iteration VALUE={printer["gcode_macro OFFSET_CAL"].iteration|int + 1 }
                            {action_respond_info("REPEAT @ OFFSET_CAL 2 i = %i" % printer["gcode_macro OFFSET_CAL"].iteration|int )}
                            #G4 P2000
                            UPDATE_DELAYED_GCODE ID=REPEAT DURATION=2
                            #G4 P1000
    					{% endif %}
    				{% endif %}
    			{% endif %}
    		{% endif %}
        {% endif %}
	{% else %}
		{action_respond_info("Valid parameter not given. T=Z, T=1-%i or T=ALL and S=0-10" % (printer["gcode_macro PRINTER_VAR"].num_of_tools|int -1))}
	{% endif %}
	#SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=iteration VALUE=0

####

[delayed_gcode REPEAT]
initial_duration: 0
gcode:
	
	{% if printer["gcode_macro OFFSET_CAL"].start_tool != -1 %}
        UPDATE_DELAYED_GCODE ID=REPEAT DURATION=0
        {action_respond_info("REPEAT delayed_gcode")}
		OFFSET_CAL T={printer["gcode_macro OFFSET_CAL"].t_called}
        #UPDATE_DELAYED_GCODE ID=REPEAT DURATION=0
	{% endif %}

####

[gcode_macro _MEASURE_START]

variable_iteration= 0
variable_cube_center_z_measured= 0
variable_delay_move_start= 1
variable_fail_limit= 0
variable_step_count= 0

variable_gap_xy= 0.4
variable_gap_z= 0.1

variable_tool_0_pos_z= 0
variable_tool_0_pos_x= 0
variable_tool_0_pos_y= 0
variable_tool_1_pos_z= 0
variable_tool_1_pos_x= 0
variable_tool_1_pos_y= 0
variable_tool_2_pos_z= 0
variable_tool_2_pos_x= 0
variable_tool_2_pos_y= 0
variable_tool_3_pos_z= 0
variable_tool_3_pos_x= 0
variable_tool_3_pos_y= 0
variable_tool_4_pos_z= 0
variable_tool_4_pos_x= 0
variable_tool_4_pos_y= 0
variable_tool_5_pos_z= 0
variable_tool_5_pos_x= 0
variable_tool_5_pos_y= 0
variable_tool_6_pos_z= 0
variable_tool_6_pos_x= 0
variable_tool_6_pos_y= 0
variable_tool_7_pos_z= 0
variable_tool_7_pos_x= 0
variable_tool_7_pos_y= 0

variable_tool_0_pos_x2= 0
variable_tool_0_pos_y2= 0

variable_tool_1_pos_x2= 0
variable_tool_1_pos_y2= 0

variable_tool_2_pos_x2= 0
variable_tool_2_pos_y2= 0

variable_tool_3_pos_x2= 0
variable_tool_3_pos_y2= 0

variable_tool_4_pos_x2= 0
variable_tool_4_pos_y2= 0

variable_tool_5_pos_x2= 0
variable_tool_5_pos_y2= 0

variable_tool_6_pos_x2= 0
variable_tool_6_pos_y2= 0

variable_tool_7_pos_x2= 0
variable_tool_7_pos_y2= 0

gcode:
    {action_respond_info("_MEASURE_START iteration %i" % printer["gcode_macro OFFSET_CAL"].iteration|int )}
	{% if printer["gcode_macro OFFSET_CAL"].start_tool != -1 %}	
		#{action_respond_info("Measuring T%i" % printer["gcode_macro TOOL_UNLOAD"].current_tool)}
		#SET_GCODE_VARIABLE MACRO=_MEASURE_STOP VARIABLE=current_tool_str VALUE='"tool_{printer["gcode_macro TOOL_UNLOAD"].current_tool}_pos_zxy"'
   		{% set cube_center_x = printer["gcode_macro _OFFSET_CAL_VAR"].cube_center[0]|float %}				#cx = cube pos center X
   		{% set cube_center_y = printer["gcode_macro _OFFSET_CAL_VAR"].cube_center[1]|float %}				#cy = cube pos center Y
   		{% set cube_center_z = printer["gcode_macro _OFFSET_CAL_VAR"].cube_center[2]|float %}				#cz = cube pos center z
   		{% set cube_half_size = printer["gcode_macro _OFFSET_CAL_VAR"].cube_sizexy|float / 2 %}				#csz = cube size / 2
   		{% set homing_point_x = printer["gcode_macro _OFFSET_CAL_VAR"].homing_point[0]|float %}				#homing_point X
   		{% set homing_point_y = printer["gcode_macro _OFFSET_CAL_VAR"].homing_point[1]|float %}				#homing_point Y
   		{% set safe_dist = printer["gcode_macro _OFFSET_CAL_VAR"].safe_dist|float %}							#safe distance
   		{% set z_crossing = printer["gcode_macro _OFFSET_CAL_VAR"].z_crossing|float %}						#measure crossing distance
   		{% set cal_start_dist_xy = printer["gcode_macro _OFFSET_CAL_VAR"].cal_start_dist_xy|float %}				#msd = measure start distance XY
   		{% set cal_start_dist_z = printer["gcode_macro _OFFSET_CAL_VAR"].cal_start_dist_z|float %}				#msd = measure start distance Z
        {% set nozzle_clearance= printer["gcode_macro _OFFSET_CAL_VAR"].nozzle_clearance|float %}				#msd = measure start distance
   		{% set msf = printer["gcode_macro _OFFSET_CAL_VAR"].measure_spd_f|int %}								#sf = speed fast		
   		{% set mss = printer["gcode_macro _OFFSET_CAL_VAR"].measure_spd_s|int %}								#sf = speed slow
  		{% set limit_xy = cal_start_dist_xy * 2 / printer["gcode_macro _OFFSET_CAL_VAR"].cal_step|float %}
  		{% set limit_z = (cal_start_dist_z * 2.5) / printer["gcode_macro _OFFSET_CAL_VAR"].cal_step|float * 4 %}
  		SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=fail_limit VALUE={limit_xy}
		SET_GCODE_OFFSET X=0 Y=0 Z=0 #MOVE=1
		G90
        
		{% if iteration == 0 %}
            {action_respond_info("Measuring T%i Z-" % printer["gcode_macro TOOL_UNLOAD"].current_tool)}
    		#Z- routine
            SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=fail_limit VALUE={limit_z}
            {% set c_tool = "tool_%s_pos_z" % printer["gcode_macro TOOL_UNLOAD"].current_tool|string %}
            G1 X{homing_point_x} Y{homing_point_y} Z{safe_dist} F{msf}
            {% if printer["gcode_macro _MEASURE_START"][c_tool] == 0 %}
             	G1 Z{cal_start_dist_z - 0.2 } F{mss}
            {% else %}
                G1 Z{printer["gcode_macro _MEASURE_START"][c_tool] + gap_z} F{msf}
                SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=fail_limit VALUE={gap_z / printer["gcode_macro _OFFSET_CAL_VAR"].cal_step * 4 * 2}
            {% endif %}
            #{action_respond_info("Measuring Z-")}
		{% elif iteration == 1 %}
    		#X- routine
            {% set c_tool = "tool_%s_pos_x" % printer["gcode_macro TOOL_UNLOAD"].current_tool|string %}
            {% if printer["gcode_macro _MEASURE_START"][c_tool] == 0 %}
        		G1 X{cube_center_x - cube_half_size + cal_start_dist_xy} Y{cube_center_y} Z{cube_center_z + safe_dist} F{msf}
            {% else %}
                G1 X{printer["gcode_macro _MEASURE_START"][c_tool] + gap_xy} Y{cube_center_y} Z{cube_center_z + safe_dist} F{msf}
                SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=fail_limit VALUE={gap_xy / printer["gcode_macro _OFFSET_CAL_VAR"].cal_step * 2}
            {% endif %}
        	G1 Z{cube_center_z_measured - z_crossing} F{mss}
    		SET_GCODE_VARIABLE MACRO=_MEASURE_STOP VARIABLE=cal_dir VALUE='"X-"'
            {action_respond_info("Measuring X-")}
		{% elif iteration == 2 %}
    		#X+ routine
            {% set c_tool = "tool_%s_pos_x2" % printer["gcode_macro TOOL_UNLOAD"].current_tool|string %}
            {% if printer["gcode_macro _MEASURE_START"][c_tool] == 0 %}
                G91
                G1 X{printer["gcode_macro _OFFSET_CAL_VAR"].cube_sizexy|float - nozzle_clearance} F{msf}
            {% else %}
                G90
                G1 X{printer["gcode_macro _MEASURE_START"][c_tool] - gap_xy} F{msf}
                SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=fail_limit VALUE={gap_xy / printer["gcode_macro _OFFSET_CAL_VAR"].cal_step * 2}
            {% endif %}
            G91
            G1 Z-{printer["gcode_macro _OFFSET_CAL_VAR"].safe_dist} F{mss}
    		SET_GCODE_VARIABLE MACRO=_MEASURE_STOP VARIABLE=cal_dir VALUE='"X"'
            {action_respond_info("Measuring X+")}
		
		{% elif iteration == 3 %}
    		#Y- routine
            {% set c_tool = "tool_%s_pos_y" % printer["gcode_macro TOOL_UNLOAD"].current_tool|string %}
            {% if printer["gcode_macro _MEASURE_START"][c_tool] == 0 %}
        		G1 Y{cube_center_y - cube_half_size + cal_start_dist_xy} X{cube_center_x} Z{cube_center_z + safe_dist} F{msf}
            {% else %}
                G1 Y{printer["gcode_macro _MEASURE_START"][c_tool] + gap_xy} X{cube_center_x} Z{cube_center_z + safe_dist} F{msf}
                SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=fail_limit VALUE={gap_xy / printer["gcode_macro _OFFSET_CAL_VAR"].cal_step * 2}
            {% endif %}
    		G1 Z{cube_center_z_measured - z_crossing} F{mss}
    		SET_GCODE_VARIABLE MACRO=_MEASURE_STOP VARIABLE=cal_dir VALUE='"Y-"'
            {action_respond_info("Measuring Y-")}
		
    	{% else %}
    		#Y+ routine
            {% set c_tool = "tool_%s_pos_y2" % printer["gcode_macro TOOL_UNLOAD"].current_tool|string %}
            {% if printer["gcode_macro _MEASURE_START"][c_tool] == 0 %}
                G91
                G1 Y{printer["gcode_macro _OFFSET_CAL_VAR"].cube_sizexy|float - nozzle_clearance} F{msf}
            {% else %}
                G90
                G1 Y{printer["gcode_macro _MEASURE_START"][c_tool] - gap_xy} F{msf}
                SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=fail_limit VALUE={gap_xy / printer["gcode_macro _OFFSET_CAL_VAR"].cal_step * 2}
            {% endif %}
            G91
            G1 Z-{printer["gcode_macro _OFFSET_CAL_VAR"].safe_dist} F{mss}
    		SET_GCODE_VARIABLE MACRO=_MEASURE_STOP VARIABLE=cal_dir VALUE='"Y"'
            {action_respond_info("Measuring Y+")}
    	{% endif %}
		
		#{action_respond_info("Start measure no %i" % iteration )}
		G91
        QUERY_ENDSTOPS
		SET_GCODE_VARIABLE MACRO=_MEASURE_STOP VARIABLE=stop_expected VALUE=1
		UPDATE_DELAYED_GCODE ID=CALIB_MOVE DURATION={delay_move_start}


	{% endif %}

####

[delayed_gcode CALIB_MOVE]
initial_duration: 0
gcode:
	{% if printer["gcode_macro OFFSET_CAL"].start_tool != -1 %}
    	QUERY_ENDSTOPS
      	{% if printer.query_endstops.last_query["manual_stepper nozzle_sense"] == 1 %}
        	{action_respond_info("TOUCH")}
        	SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=step_count VALUE=0
    		UPDATE_DELAYED_GCODE ID=CALIB_MOVE DURATION=0
        	{% if printer["gcode_macro _MEASURE_START"].step_count < 3 %}
        		{action_respond_info("Fail. Contact too early.")}
                G91
                G1 Z{printer["gcode_macro _OFFSET_CAL_VAR"].safe_dist}
                G90
        		SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE=t_called VALUE='"fail"'
        		_OFFSET_CALCULATE
    		{% else  %}
    			{% if printer["gcode_macro _MEASURE_START"].iteration == 0 %}
                    {action_respond_info("Measured Z%.3f" % printer.toolhead.position.z )}
                    {% set result = printer.toolhead.position.z + printer["gcode_macro _OFFSET_CAL_VAR"].cal_step|float / 4 %}
    				SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=cube_center_z_measured VALUE={result}
                  	{% set c_tool = "tool_%s_pos_z" % printer["gcode_macro TOOL_UNLOAD"].current_tool|string %}
                    SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE={c_tool} VALUE={result|round(3)}
                    SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE={c_tool} VALUE={printer["gcode_macro _OFFSET_CALCULATE"][c_tool] + result}
    			{% endif %}
                G91
                G1 Z{printer["gcode_macro _OFFSET_CAL_VAR"].safe_dist}
                G4 P500
                _MEASURE_STOP
    		{% endif %}


    	#{% elif printer["gcode_macro _MEASURE_START"].step_count > printer["gcode_macro _MEASURE_START"].fail_limit %}
    		#{action_respond_info("Fail. No contact.")}
          	#SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=step_count VALUE=0
    		#SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE=t_called VALUE='"fail"'
    		#_OFFSET_CALCULATE
    	{% else %}
            {% if printer["gcode_macro _MEASURE_START"].step_count > printer["gcode_macro _MEASURE_START"].fail_limit %}
                G91
                G1 Z{printer["gcode_macro _OFFSET_CAL_VAR"].safe_dist}
                {action_respond_info("Fail. No contact.")}
              	SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=step_count VALUE=0
        		SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE=t_called VALUE='"fail"'
        		_OFFSET_CALCULATE
            {% else %} 
        		G91
                {% if printer["gcode_macro _MEASURE_START"].iteration == 0 %}
                    G1 Z-{printer["gcode_macro _OFFSET_CAL_VAR"].cal_step|float / 4} F1000
                    #G1 Z-0.0025 F1000
                    {% if printer["gcode_macro _MEASURE_START"].step_count|int is odd %}
                        G1 X-1 F5000
                    {% else %}
                        G1 X1 F5000
                    {% endif %}
                {% else %}
            		G1 {printer["gcode_macro _MEASURE_STOP"].cal_dir}{printer["gcode_macro _OFFSET_CAL_VAR"].cal_step|float} F1000
            	{% endif %}
        		SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=step_count VALUE={printer["gcode_macro _MEASURE_START"].step_count + 1}
                UPDATE_DELAYED_GCODE ID=CALIB_MOVE DURATION={printer["gcode_macro _OFFSET_CAL_VAR"].cal_step_time}
            {% endif %}
    	{% endif %}
	{% endif %}

####

#[manual_stepper nozzle_sense]  #Dummy stepper to add an Endstop for nozzle
#step_pin: Can_Exrtuder: PA8
#dir_pin: Can_Exrtuder: PA9
#enable_pin: Can_Exrtuder: PA10
#microsteps: 16
#rotation_distance: 23.000
#endstop_pin: ^!Can_Exrtuder:PB8

####

[gcode_macro _MEASURE_STOP]

variable_cal_dir = 0
variable_cal_plus_pos = 0
variable_stop_expected = 0
#and stop_expected == 1 

gcode:
    {action_respond_info("_MEASURE_STOP round %i" % printer["gcode_macro OFFSET_CAL"].iteration|int )}
	{% if printer["gcode_macro OFFSET_CAL"].start_tool != -1 and stop_expected == 1 %}
		SET_GCODE_VARIABLE MACRO=_MEASURE_STOP VARIABLE=stop_expected VALUE=0
		QUERY_ENDSTOPS
		
		{% set i = printer["gcode_macro _MEASURE_START"].iteration|int %}
		SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=iteration VALUE={i + 1}
		#{% set ir = printer["gcode_macro OFFSET_CAL"].iteration|int %}											# ir = iteration for repeat test
		{% if i == 0 %}
			#Z- routine
            {% if printer["gcode_macro OFFSET_CAL"].t_called == "Z" %}
                _OFFSET_CALCULATE
       		{% else %}     
			_MEASURE_START
    		{% endif %}
		{% elif i == 1 %}
			#X+ routine
			{action_respond_info("Measured X%.3f" % printer.toolhead.position.x )}
            {% set c_tool = "tool_%s_pos_x" % (printer["gcode_macro TOOL_UNLOAD"].current_tool|string) %}
            SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE={c_tool} VALUE=({printer.toolhead.position.x|round(3)})
			SET_GCODE_VARIABLE MACRO=_MEASURE_STOP VARIABLE=cal_plus_pos VALUE={printer.toolhead.position.x}
			_MEASURE_START
		{% elif i == 2 %}
			#X- routine
			{action_respond_info("Measured X%.3f" % printer.toolhead.position.x )}
			{% set result = (printer.toolhead.position.x + cal_plus_pos) / 2 %}
            {% set c_tool = "tool_%s_pos_x" % (printer["gcode_macro TOOL_UNLOAD"].current_tool|string) %}
            SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE={c_tool} VALUE={printer["gcode_macro _OFFSET_CALCULATE"][c_tool] + result}
			{action_respond_info("Measured X center is %.3f" % result )}
            {% if printer["gcode_macro TOOL_UNLOAD"].current_tool|int == 0 %}
                SAVE_VARIABLE VARIABLE=tool_0_last_x_center VALUE={result|round(1)}
            {% endif %}
            {% set c_tool = "tool_%s_pos_x2" % (printer["gcode_macro TOOL_UNLOAD"].current_tool|string) %}
            SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE={c_tool} VALUE=({printer.toolhead.position.x|round(3)})
			_MEASURE_START
		{% elif i == 3 %}
			#Y+ routine
			{action_respond_info("Measured Y%.3f" % printer.toolhead.position.y )}
            {% set c_tool = "tool_%s_pos_y" % (printer["gcode_macro TOOL_UNLOAD"].current_tool|string) %}
            SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE={c_tool} VALUE={printer.toolhead.position.y|round(3)}
			SET_GCODE_VARIABLE MACRO=_MEASURE_STOP VARIABLE=cal_plus_pos VALUE={printer.toolhead.position.y}
			_MEASURE_START
		{% elif i == 4 %}
			#Y- routine
			{action_respond_info("Measured Y%.3f" % printer.toolhead.position.y )}
			{% set result = (printer.toolhead.position.y + cal_plus_pos) / 2 %}
            {% set c_tool = "tool_%s_pos_y" % (printer["gcode_macro TOOL_UNLOAD"].current_tool|string) %}
            SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE={c_tool} VALUE={printer["gcode_macro _OFFSET_CALCULATE"][c_tool] + result}
			{action_respond_info("Measured Y center is %.3f" % result )}
            {% if printer["gcode_macro TOOL_UNLOAD"].current_tool|int == 0 %}
                SAVE_VARIABLE VARIABLE=tool_0_last_y_center VALUE={result|round(1)}
            {% endif %}
            {% set c_tool = "tool_%s_pos_y2" % (printer["gcode_macro TOOL_UNLOAD"].current_tool|string) %}
            SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE={c_tool} VALUE=({printer.toolhead.position.y|round(3)})
			SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=iteration VALUE=0
			SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=measured VALUE=1
            {action_respond_info("offset cal t_called %s" % printer["gcode_macro OFFSET_CAL"].t_called|string )}
			OFFSET_CAL T={printer["gcode_macro OFFSET_CAL"].t_called}
		{% endif %}
	{% endif %}

####

[gcode_macro _OFFSET_CALCULATE]

variable_t_called= 0
variable_samples= 0
variable_reset_after_cal = 0

variable_tool_0_pos_x= 0
variable_tool_0_pos_y= 0
variable_tool_0_pos_z= 0
variable_tool_1_pos_x= 0
variable_tool_1_pos_y= 0
variable_tool_1_pos_z= 0
variable_tool_2_pos_x= 0
variable_tool_2_pos_y= 0
variable_tool_2_pos_z= 0
variable_tool_3_pos_x= 0
variable_tool_3_pos_y= 0
variable_tool_3_pos_z= 0
variable_tool_4_pos_x= 0
variable_tool_4_pos_y= 0
variable_tool_4_pos_z= 0
variable_tool_5_pos_x= 0
variable_tool_5_pos_y= 0
variable_tool_5_pos_z= 0
variable_tool_6_pos_x= 0
variable_tool_6_pos_y= 0
variable_tool_6_pos_z= 0
variable_tool_7_pos_x= 0
variable_tool_7_pos_y= 0
variable_tool_7_pos_z= 0

gcode:

	{% if printer["gcode_macro OFFSET_CAL"].start_tool != -1 %}
        #SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=start_tool VALUE=-2
        TURN_OFF_HEATERS
        #TOOL_UNLOAD P=0

        {% if printer.configfile.config.probe.pin == "^!Can_Exrtuder:PB9" %}
            {action_respond_info("Probe = Swich")}
            TOOL_UNLOAD P=0
        {% elif "PF5" in(printer.configfile.config.probe.pin) %}
            {action_respond_info("Probe = Piezo")}
            T0 P=01
        {% else %}
        M112
        {% endif %}

		SET_GCODE_VARIABLE MACRO=TOOL_UNLOAD VARIABLE=current_tool VALUE=0
        SET_GCODE_VARIABLE MACRO=TOOL_LOAD VARIABLE=next_tool VALUE=0
        SAVE_VARIABLE VARIABLE=current_tool VALUE=0

        SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=iteration VALUE=-1
        SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=measured VALUE=0
        SET_GCODE_VARIABLE MACRO=OFFSET_CAL VARIABLE=start_tool VALUE=-1
        SET_GCODE_VARIABLE MACRO=_MEASURE_START VARIABLE=iteration VALUE=0
        SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE=t_called VALUE=0

        SAVE_VARIABLE VARIABLE=reset_after_cal VALUE=1

       	{% if t_called != "fail" %}
            SET_GCODE_VARIABLE MACRO=ACCEPT_OFFSETS VARIABLE=accept VALUE=1
            #{% if samples == 0 %}
                #{% set s = 1 %}
            #{% else %}
                #{% set s = samples %}
            #{% endif %}
            #{action_respond_info("tool_0_pos_x %s" % (tool_0_pos_x / s)|round(2)) }
            #{action_respond_info("tool_0_pos_y %s" % (tool_0_pos_y / s)|round(2)) }
            #{action_respond_info("tool_0_pos_z %s" % (tool_0_pos_z / s)|round(2)) }
            #{action_respond_info("tool_1_pos_x %s" % (tool_1_pos_x / s)|round(2)) }
            #{action_respond_info("tool_1_pos_y %s" % (tool_1_pos_y / s)|round(2)) }
            #{action_respond_info("tool_1_pos_z %s" % (tool_1_pos_z / s)|round(2)) }
            #{action_respond_info("tool_2_pos_x %s" % (tool_2_pos_x / s)|round(2)) }
            #{action_respond_info("tool_2_pos_y %s" % (tool_2_pos_y / s)|round(2)) }
            #{action_respond_info("tool_2_pos_z %s" % (tool_2_pos_z / s)|round(2)) }
            #{action_respond_info("tool_3_pos_x %s" % (tool_3_pos_x / s)|round(2)) }
            #{action_respond_info("tool_3_pos_y %s" % (tool_3_pos_y / s)|round(2)) }
            #{action_respond_info("tool_3_pos_z %s" % (tool_3_pos_z / s)|round(2)) }
            #{action_respond_info("tool_4_pos_x %s" % (tool_4_pos_x / s)|round(2)) }
            #{action_respond_info("tool_4_pos_y %s" % (tool_4_pos_y / s)|round(2)) }
            #{action_respond_info("tool_4_pos_z %s" % (tool_4_pos_z / s)|round(2)) }

            #{% if samples == 1 and t_called != "Z" %}
                #{% set result = tool_0_pos_z + printer["gcode_macro _OFFSET_CAL_VAR"].z_offset_extra_piezo|float %}
                #{% set result = tool_0_pos_z %}
            #{% else %}

            {% if printer.configfile.config.probe.pin == "^!Can_Exrtuder:PB9" %}
                {action_respond_info("Probe = Swich")}
                {% set result = tool_0_pos_z / samples + printer["gcode_macro _OFFSET_CAL_VAR"].z_offset_extra_switch|float %} #+ 0.2 %}
            {% elif "PF5" in(printer.configfile.config.probe.pin) %}
                {action_respond_info("Probe = Piezo")}
                {% set result = tool_0_pos_z / samples + printer["gcode_macro _OFFSET_CAL_VAR"].z_offset_extra_piezo|float %}
            {% else %}
                {action_respond_info("Unknown probe pin")}
                M112
            {% endif %}

                #{% set result = tool_0_pos_z / samples + printer["gcode_macro _OFFSET_CAL_VAR"].z_offset_extra_piezo|float %} #+ 0.2 %}
    		#{% endif %}
            SET_GCODE_VARIABLE MACRO=ACCEPT_OFFSETS VARIABLE=tool_0_offset_z VALUE={result|round(3)}
            {action_respond_info("Z-offset correction %.3f" % result|round(3) )}

            {% if t_called != "Z" %}

        		{% set i = printer["gcode_macro PRINTER_VAR"].num_of_tools|int %}
            	{% for i in range(1, i) %}

        			#{% if t_called|int == i or t_called == "ALL" %}		#Calculate or not
                        {% set decimals = printer["gcode_macro _OFFSET_CAL_VAR"].results_decimals %}
        				#SET_GCODE_VARIABLE MACRO=ACCEPT_OFFSETS VARIABLE=accept VALUE=1
        				{% set i_xyz = "x", "y", "z" %}
        				{% set j = 3 %}
        				{% for j in range(j) %}
        					{% set var1 = "tool_%s_pos_%s" % ( i|string, i_xyz[j] ) %}
                            {% if printer["gcode_macro _OFFSET_CALCULATE"][var1] != 0 %}
            					{% set var2 = "tool_0_pos_%s" % i_xyz[j] %}
                                #{% if samples == 0 %}
                                    #{% set var3 = "tool_%s_offset_%s" % ( i|string, i_xyz[j] ) %}
                                    #{% set result = printer["gcode_macro _OFFSET_CALCULATE"][var1] - printer["gcode_macro _OFFSET_CALCULATE"][var2] %}
                                    #{% set result = (printer["gcode_macro _TOOL_CHANGE_VAR"][var3] * 4 + result) / 5 %}
                                #{% else %}
                        		{% set result = (printer["gcode_macro _OFFSET_CALCULATE"][var1] / samples) - (printer["gcode_macro _OFFSET_CALCULATE"][var2] / samples) %}
                                #{% endif %}
            					SET_GCODE_VARIABLE MACRO=ACCEPT_OFFSETS VARIABLE=tool_{ i }_offset_{ i_xyz[j] } VALUE={result|round(decimals)}

                                #output old and new values
                                {% set var3 = "tool_%s_offset_%s" % ( i|string, i_xyz[j] ) %}                                                              #variable_tool_1_offset_x
                                {% set old_value = printer["gcode_macro _TOOL_CHANGE_VAR"][var3]|float|round(decimals) %}
                                #{action_respond_info("test %s" % old_value )}
                                #{% set decimals = printer["gcode_macro _OFFSET_CAL_VAR"].results_decimals %}
                                {% set result = result|round(decimals) %}
                                {% set result = "%.10f" % result|float %}
                                #{% set old_value = old_value|round(decimals) %}
                                {% set old_value = "%.10f" % old_value|float %}
                                #{action_respond_info("test %s" % old_value )}
                                {% set truncate_result = result|length - 10 + decimals %}
                                {% set truncate_old_value = old_value|length - 10 + decimals %}
                            
                                {action_respond_info("Offset tool %i old %s%s --> New %s%s" % ( i, i_xyz[j]|upper, old_value|truncate((truncate_old_value), False, ''), i_xyz[j]|upper, result|truncate((truncate_result), False, '') ) )}
                                #{action_respond_info("Offset tool %i old %s%.2f --> New %s%.2f" % ( i, i_xyz[j]|upper, old_value, i_xyz[j]|upper, result|round(printer["gcode_macro _OFFSET_CAL_VAR"].results_decimals) ) )}
                                #Offset tool 1 old X0.123 --> New X0.321
                            {% endif %}
                         {% endfor %}

        			#{% endif %}

        		{% endfor %}
                
           	{% endif %}     
            {action_respond_info("ACCEPT_OFFSETS ?")}

    	{% endif %}
        {% set i = 8 %}
        {% for i in range(i) %}
            {% set i_xyz = "x", "y", "z" %}
            {% set j = 3 %}
            {% for j in range(j) %}
            	SET_GCODE_VARIABLE MACRO=_OFFSET_CALCULATE VARIABLE=tool_{i}_pos_{ i_xyz[j] } VALUE=0
            {% endfor %}
        {% endfor %}
	{% endif %}

####

[gcode_macro ACCEPT_OFFSETS]

variable_accept= 0
variable_t_called= 0

variable_tool_0_offset_z= 0


variable_tool_1_offset_x= 99
variable_tool_1_offset_y= 99
variable_tool_1_offset_z= 99
variable_tool_2_offset_x= 99
variable_tool_2_offset_y= 99
variable_tool_2_offset_z= 99
variable_tool_3_offset_x= 99
variable_tool_3_offset_y= 99
variable_tool_3_offset_z= 99
variable_tool_4_offset_x= 99
variable_tool_4_offset_y= 99
variable_tool_4_offset_z= 99
variable_tool_5_offset_x= 99
variable_tool_5_offset_y= 99
variable_tool_5_offset_z= 99
variable_tool_6_offset_x= 99
variable_tool_6_offset_y= 99
variable_tool_6_offset_z= 99
variable_tool_7_offset_x= 99
variable_tool_7_offset_y= 99
variable_tool_7_offset_z= 99

gcode:
	{% if printer["gcode_macro ACCEPT_OFFSETS"].accept == 1 %}
		{% if t_called != "Z" %}
            {% set i = printer["gcode_macro PRINTER_VAR"].num_of_tools|int %}
    		{% set tc = t_called|int %}
    		{% set i_xyz = "x", "y", "z" %}
    		{% set j = 3 %}
		
    		{% for i in range(1, i) %}
    			#{% if i == tc or t_called == "ALL"%}								#save or not
    				{% for j in range(j) %}
    					{% set var = "tool_%i_offset_%s" % ( i, i_xyz[j] ) %}
                        {% set result = printer["gcode_macro ACCEPT_OFFSETS"][var] %}
                        {% if result != 99 %}
        					SET_GCODE_VARIABLE MACRO=_TOOL_CHANGE_VAR VARIABLE=tool_{i}_offset_{i_xyz[j]} VALUE={result}
        					SAVE_VARIABLE VARIABLE=tool_{i}_offset_{i_xyz[j]} VALUE={result}
                            #{action_respond_info("Offset tool %i %s%.3f" % ( i, i_xyz[j]|upper, result ) ) }
                        {% endif %}
                        SET_GCODE_VARIABLE MACRO=ACCEPT_OFFSETS VARIABLE=tool_{i}_offset_{i_xyz[j]} VALUE=99
    				{% endfor %}
    			#{% endif %}
    		{% endfor %}
            {action_respond_info("Tool offsets Saved!")}
		{% endif %}
    #SET_GCODE_OFFSET Z_ADJUST={tool_0_offset_z} MOVE=0
    SET_GCODE_OFFSET Z={tool_0_offset_z}
    Z_OFFSET_APPLY_PROBE
    SET_GCODE_VARIABLE MACRO=ACCEPT_OFFSETS VARIABLE=accept VALUE=0
    {action_respond_info("Type SAVE_CONFIG to save T0 Z-offset!")}
    #G4 P3000
    #SAVE_CONFIG
    {% endif %}

####